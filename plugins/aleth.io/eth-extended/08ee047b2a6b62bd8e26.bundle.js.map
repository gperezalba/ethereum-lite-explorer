{"version":3,"sources":["webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/util/react/DelayedRender.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/LoadingBox.tsx","webpack://__aleth_io__ethExtended/./app/shared/component/LoadingBox.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/util/react/HoverState.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/overlay/Layer.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/overlay/Mask.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/CloseIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/layout/toolbar/ToolbarIconButton.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/triggerGraph/SelectGraph.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/triggerGraph/SelectFields.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/triggerGraph/TriggerGraphLayerContent.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/triggerGraph/TriggerGraphLayer.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/BubbleChartIcon.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/TriggerGraphWrapper.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/tx/txSummary/component/TxSummary.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/Button.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/RadioOnIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/RadioOffIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/Radio.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/box/HighlightSelectBox.tsx"],"names":["DelayedRender","react__WEBPACK_IMPORTED_MODULE_1__","[object Object]","this","visible","renderTimer","setTimeout","props","delay","clearTimeout","children","tslib__WEBPACK_IMPORTED_MODULE_0__","mobx__WEBPACK_IMPORTED_MODULE_2__","mobx_react__WEBPACK_IMPORTED_MODULE_3__","LoadingBox_LoadingBox","external_react_","MessageBox","Icon","SpinnerRegular","colors","__webpack_require__","d","__webpack_exports__","component_LoadingBox_LoadingBox","dangerouslySetInnerHTML","__html","translation","get","HoverState","isHovered","handleMount","ref","addEventListener","onMouseEnter","onMouseLeave","handleUnmount","removeEventListener","_DomNodeProxy__WEBPACK_IMPORTED_MODULE_4__","onMount","onUnmount","mobx__WEBPACK_IMPORTED_MODULE_3__","mobx_react__WEBPACK_IMPORTED_MODULE_2__","Layer","styled_components","div","theme","overlayBg","overlayBorder","overlayText","Mask","CloseIcon_CloseIcon","SvgIcon","Object","assign","stroke","strokeWidth","fill","fillRule","points","ToolbarIconButton_ToolbarIconButton","hover","IconButton","color","toolbarIconHover","toolbarIcon","SelectGraph_SelectGraph","SelectGraph","onCheckboxChange","_e","checked","_name","value","fields","setSelectedField","requestClose","SelectBox","offset","left","top","render","external_mobx_react_","getFields","map","f","Radio","id","key","name","getSelectedField","onChange","label","HighlightSelectBox","tslib_es6","GraphSelectFieldKey","SelectFields","t","Trigger","Account","Message","selectedField","field","find","external_mobx_","events","internalNav","doubleClick","event","nodes","length","pageUri","split","hashParts","resolvedUrl","resolve","win","window","open","focus","accountSvg","contractMsgSvg","txSvg","txUrl","encodeURIComponent","contractMsgUrl","accountUrl","options","layout","hierarchical","enabled","levelSeparation","nodeSpacing","treeSpacing","blockShifting","edgeMinimization","parentCentralization","direction","sortMethod","physics","interaction","tooltipDelay","edges","dashes","title","font","size","align","bold","face","vadjust","mod","shape","multi","removeDashes","values","width","GRAPH_ADAPTER_NAME","globalStylesInjected","TriggerGraphLayerContent_$TriggerGraphLayerContent","$TriggerGraphLayerContent","super","dataModule","dataAdapters","alias","def","contextType","txHash","graphType","load","ctx","loadGraphData","getContentComponent","Promise","all","e","then","bind","default","getContentProps","asyncData","graph","data","style","height","position","getErrorPlaceholder","ErrorBox","getLoadingPlaceholder","LoadingBox","txGraphStore","fetchMessageGraphData","logger","error","fetchAccountInteractionGraphData","Error","fetchTriggerGraphData","prepareGraphData","str","hex","pop","kind","substr","type","tempType","preparedEdges","preparedNodes","preparedData","item","getNodeColor","from","to","toUpperCase","arrows","chosen","edge","image","getIconType","hiddenLabel","abbreviate","context","InlineModule_","moduleDef","extraContentProps","TriggerGraphLayerContent","withInternalNav_","StyledLayer","lib_styled_components","withConfig","displayName","componentId","Header","overlayToolbarBorder","CloseIconContainer","TypeContainer","Content","TriggerGraphLayer_TriggerGraphLayer","TriggerGraphLayer","selectFields","prevProps","oldSelectedField","external_react_dom_default","a","createPortal","Label","onClick","onRequestClose","document","body","BubbleChartIcon_BubbleChartIcon","TriggerGraphWrapper_TriggerGraphWrapper","TriggerGraphWrapper","layerVisible","handleLayerToggle","toggleLayer","tr","Button","TxSummary_TxSummary","TxSummary","repressGraphTrigger","handleResize","innerWidth","items","buildItems","tx","renderExpander","config","isOpen","isFullWidth","Expander","fullWidth","locale","renderHeader","header","renderContent","content","status","arrowPosition","AccordionItemContentStatus","Loaded","LayoutRow","LayoutRowItem","ThemeContext_","Consumer","AccordionContentFrame","backgroundColor","gridEvenRowBg","borderColor","gridBorder","noBorder","LayoutSection","useWrapper","AccordionVertical","noDataContent","NotAvailableBox","loadingText","errorText","onContentError","index","isFullTxDetails","AccordionItem","contractMsgCount","hash","contractMsgs","cmLiteStore","fetchByTx","CmGrid","tokenTransferCount","tokenTransfers","tokenTransferStore","TokenTransfersGrid","logEventsCount","logEvents","logEventsStore","LogEvents","logEventsSectionBg","logEventsBorder","shallow","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styled_components__WEBPACK_IMPORTED_MODULE_1__","_layout_content_box_Box__WEBPACK_IMPORTED_MODULE_2__","_util_react_HoverState__WEBPACK_IMPORTED_MODULE_3__","ButtonRoot","floating","disabled","StyledBox","colorSets","primary","background","buttonPrimaryBgActive","buttonPrimaryBg","text","buttonPrimaryText","secondary","buttonSecondaryBgActive","buttonSecondaryBg","buttonSecondaryText","iconPlacement","metrics","fontSize","lineHeight","fontWeight","iconSize","letterSpacing","textPaddingTop","textPaddingX","defaultProps","RadioOnIcon_RadioOnIcon","RadioOffIcon_RadioOffIcon","RadioWrapper","RadioLabel","checkboxLabel","RadioIconWrapper","checkboxIcon","Radio_Radio","display","htmlFor","_alethio_ui_lib_styled_components__WEBPACK_IMPORTED_MODULE_0__","selectBoxBorder","selectBoxBg","selectBoxTextDisabled","selectBoxText","selectBoxBubble","selectBoxArrow"],"mappings":"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","file":"08ee047b2a6b62bd8e26.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nexport interface IDelayedRenderProps {\r\n    /** Delay in seconds */\r\n    delay: number;\r\n}\r\n\r\n@observer\r\nexport class DelayedRender extends React.Component<IDelayedRenderProps> {\r\n    @observable\r\n    private visible = false;\r\n    private renderTimer: number | undefined;\r\n\r\n    componentDidMount() {\r\n        this.renderTimer = setTimeout(() => {\r\n            this.visible = true;\r\n        }, this.props.delay * 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.renderTimer) {\r\n            clearTimeout(this.renderTimer);\r\n            this.renderTimer = void 0;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.visible ? this.props.children : null;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { MessageBox, IMessageBoxColors } from \"./MessageBox\";\r\nimport { SpinnerRegular } from \"./fx/SpinnerRegular\";\r\nimport { DelayedRender } from \"./util/react/DelayedRender\";\r\n\r\nexport interface ILoadingBoxProps {\r\n    colors?: IMessageBoxColors;\r\n}\r\n\r\nexport class LoadingBox extends React.Component<ILoadingBoxProps> {\r\n    render() {\r\n        return (\r\n            <DelayedRender delay={1}>\r\n                <MessageBox Icon={SpinnerRegular} colors={this.props.colors}>{this.props.children}</MessageBox>\r\n            </DelayedRender>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { IMessageBoxProps } from \"@alethio/ui/lib/MessageBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { LoadingBox as LoadingBoxBase } from \"@alethio/ui/lib/LoadingBox\";\n\nexport interface ILoadingBoxProps {\n    colors?: IMessageBoxProps[\"colors\"];\n    translation: ITranslation;\n}\n\nexport class LoadingBox extends React.Component<ILoadingBoxProps> {\n    render() {\n        return (\n            <LoadingBoxBase colors={this.props.colors}>\n                <span dangerouslySetInnerHTML={{\n                    __html: this.props.translation.get(\"general.loadingText\")\n                }} />\n            </LoadingBoxBase>\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { DomNodeProxy } from \"./DomNodeProxy\";\r\n\r\ninterface IHoverStateProps {\r\n    children(hover: boolean): React.ReactElement<{}>;\r\n}\r\n\r\n@observer\r\nexport class HoverState extends React.Component<IHoverStateProps> {\r\n    @observable\r\n    private isHovered = false;\r\n\r\n    render() {\r\n        return <DomNodeProxy\r\n            onMount={this.handleMount}\r\n            onUnmount={this.handleUnmount}\r\n        >{this.props.children(this.isHovered)}</DomNodeProxy>;\r\n    }\r\n\r\n    private handleMount = (ref: HTMLElement) => {\r\n        ref.addEventListener(\"mouseenter\", this.onMouseEnter);\r\n        ref.addEventListener(\"mouseleave\", this.onMouseLeave);\r\n    }\r\n\r\n    private handleUnmount = (ref: HTMLElement) => {\r\n        ref.removeEventListener(\"mouseenter\", this.onMouseEnter);\r\n        ref.removeEventListener(\"mouseleave\", this.onMouseLeave);\r\n    }\r\n\r\n    private onMouseEnter = () => {\r\n        this.isHovered = true;\r\n    }\r\n\r\n    private onMouseLeave = () => {\r\n        this.isHovered = false;\r\n    }\r\n}\r\n","import styled from \"../styled-components\";\r\n\r\nexport const Layer = styled.div`\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background: ${props => props.theme.colors.overlayBg};\r\n    border: 1px solid ${props => props.theme.colors.overlayBorder};\r\n    color: ${props => props.theme.colors.overlayText};\r\n    box-shadow: 0 24px 56px 0 rgba(39, 54, 86, 0.16);\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n","import styled from \"../styled-components\";\r\n\r\nexport const Mask = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(255, 255, 255, .95);\r\n`;\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface ICloseIconProps extends ISvgIconProps {\r\n}\r\n\r\nexport class CloseIcon extends React.Component<ICloseIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <polygon fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        // tslint:disable-next-line:max-line-length\r\n                        points=\"19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12\"\r\n                    ></polygon>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { IIconButtonProps, IconButton } from \"../../control/IconButton\";\r\nimport { HoverState } from \"../../util/react/HoverState\";\r\n\r\nexport interface IToolbarIconButtonProps {\r\n    Icon: IIconButtonProps[\"Icon\"];\r\n    iconSize?: number;\r\n    onClick?(): void;\r\n}\r\n\r\nexport class ToolbarIconButton extends React.Component<IToolbarIconButtonProps> {\r\n    render() {\r\n        return (\r\n            <HoverState>\r\n                {(hover) =>\r\n                    <IconButton {...this.props} color={\r\n                        theme => hover ? theme.colors.toolbarIconHover : theme.colors.toolbarIcon } />\r\n                }\r\n            </HoverState>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { Observer, observer } from \"mobx-react\";\nimport { SelectBox } from \"@alethio/ui/lib/control/SelectBox\";\nimport { Radio } from \"@alethio/ui/lib/control/Radio\";\nimport { HighlightSelectBox } from \"@alethio/explorer-ui/lib/box/HighlightSelectBox\";\nimport { SelectFields } from \"./SelectFields\";\n\ninterface ISelectGraphProps {\n    fields: SelectFields;\n}\n@observer\nexport class SelectGraph extends React.Component<ISelectGraphProps> {\n    private requestClose: () => void;\n    render() {\n        return (\n            <SelectBox offset={{left: -20, top: -47}} render={({requestClose}) => {\n                this.requestClose = requestClose;\n                return (\n                    <Observer>\n                        {() => this.props.fields.getFields().map((f) => {\n                            return (\n                                <Radio\n                                    id={\"txGraph_\" + f.key}\n                                    key={f.key}\n                                    value={f.key}\n                                    name=\"txGraph\"\n                                    checked={this.props.fields.getSelectedField().key === f.key}\n                                    onChange={this.onCheckboxChange}\n                                >{f.label}</Radio>\n                            );\n                        })}\n                    </Observer>\n                );\n            }}>\n                <HighlightSelectBox>{ this.props.fields.getSelectedField().label }</HighlightSelectBox>\n            </SelectBox>\n        );\n    }\n\n    private onCheckboxChange = (\n        _e: React.ChangeEvent<HTMLInputElement>,\n        checked: boolean,\n        _name: string,\n        value: string\n    ) => {\n        if (checked) {\n            this.props.fields.setSelectedField(value);\n        }\n        this.requestClose();\n    }\n}\n","import { observable, action } from \"mobx\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\n\nexport enum GraphSelectFieldKey {\n    Trigger = \"trigger\",\n    Account = \"account\",\n    Message = \"message\"\n}\n\nexport interface IGraphSelectField {\n    key: GraphSelectFieldKey;\n    label: string;\n}\n\nexport class SelectFields {\n    protected fields: IGraphSelectField[];\n\n    @observable\n    protected selectedField: IGraphSelectField;\n\n    constructor(t: ITranslation) {\n        this.fields = [{\n            key: GraphSelectFieldKey.Trigger,\n            label: t.get(\"txView.content.txSummary.graphSelect.triggerGraph\")\n        }, {\n            key: GraphSelectFieldKey.Account,\n            label: t.get(\"txView.content.txSummary.graphSelect.accountInteractionGraph\")\n        }, {\n            key: GraphSelectFieldKey.Message,\n            label: t.get(\"txView.content.txSummary.graphSelect.messageGraph\")\n        }];\n        this.selectedField = this.fields[0];\n    }\n\n    getFields() {\n        return this.fields;\n    }\n\n    getSelectedField() {\n        return this.selectedField;\n    }\n\n    @action setSelectedField(key: string) {\n        const field = this.fields.find((f: IGraphSelectField) => {\n            return key === f.key;\n        });\n        if (field) {\n            this.selectedField = field;\n        }\n    }\n}\n","import * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ErrorBox } from \"@alethio/ui/lib/ErrorBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { IGraphData } from \"app/eth-extended/data/tx/graph/IGraphData\";\nimport { TxGraphStore } from \"app/eth-extended/data/tx/graph/TxGraphStore\";\nimport { LoadingBox } from \"app/shared/component/LoadingBox\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport { GraphSelectFieldKey } from \"./SelectFields\";\nimport { InlineModule } from \"plugin-api/component/InlineModule\";\nimport { IModuleInlineDef } from \"plugin-api/IModuleInlineDef\";\nimport { IGraphProps } from \"react-graph-vis\";\nimport { injectGlobal } from \"@alethio/ui/lib/styled-components\";\nimport { withInternalNav, IInternalNav } from \"plugin-api/withInternalNav\";\n\ninterface IGraphContext {\n    txHash: string;\n    graphType: string;\n}\n\ntype VisEdge = import(\"vis\").Edge;\ntype VisNode = import(\"vis\").Node;\ntype PrepdGraphData = Exclude<import(\"react-graph-vis\").IGraphProps<VisNode, VisEdge>[\"graph\"], undefined>;\n\nconst events: (internalNav: IInternalNav) => import(\"react-graph-vis\").IGraphProps<{}, {}>[\"events\"] =\n(internalNav) => ({\n    doubleClick: (event) => {\n        if (!event.nodes.length) {\n            // we clicked on an edge\n            return;\n        }\n        let pageUri = \"\";\n        if (event.nodes[0].split(\"_\")[0] === \"Account\") {\n            pageUri = `page://aleth.io/account?accountHash=${event.nodes[0].split(\"_\")[1]}`;\n        } else if (event.nodes[0].split(\"_\")[0] === \"Tx\") {\n            pageUri = `page://aleth.io/tx?txHash=${event.nodes[0].split(\"_\")[1]}`;\n        } else {\n            const hashParts = event.nodes[0].split(\"_\");\n            pageUri = `page://aleth.io/cm?txHash=${hashParts[1]}&validationIndex=${hashParts[2]}`;\n        }\n        let resolvedUrl = internalNav.resolve(pageUri);\n        if (!resolvedUrl) {\n            return;\n        }\n\n        const win = window.open(resolvedUrl, \"_blank\");\n        if (!win) {\n            return;\n        }\n        win.focus();\n    }\n});\n\nconst accountSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"41\">` +\n    `<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n    style=\"padding: 3px; border: 1px solid #A7B5D1; border-radius: 100%; background-color: white\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"padding: 9px; border-radius: 100%; border: 1px solid rgba(167, 181, 209, 0.4);\n        background-color: white;\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"height: 12px; width: 12px; transform: rotate(45deg); background-color: #A7B5D1\">` +\n    `</div>` +\n    `</div>` +\n    `</div>` +\n    `</foreignObject>` +\n    `</svg>`;\n\nconst contractMsgSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"41\">` +\n    `<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n    style=\"padding: 3px; border: 1px solid #FF9F1C; border-radius: 100%; background-color: white\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"padding: 7px 9px 7px 12px; border-radius: 100%; border: 1px solid rgba(255, 159, 28, 0.4);\n        background-color: white;\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"width: 0; height: 0; border-style: solid; border-width: 8px 0 8px 12px;\n        border-color: transparent transparent transparent #ffa01c;\">` +\n    `</div>` +\n    `</div>` +\n    `</div>` +\n    `</foreignObject>` +\n    `</svg>`;\n\nconst txSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"41\" height=\"41\">` +\n    `<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n    style=\"padding: 3px; border: 1px solid #273656; border-radius: 100%; background-color: white\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"padding: 7px; border-radius: 100%; border: 1px solid rgba(39, 54, 86, 0.4);\n        background-color: white;\">` +\n    `<div xmlns=\"http://www.w3.org/1999/xhtml\"\n        style=\"height: 16px; width: 16px; border-radius: 100%; background-color: #273656\">` +\n    `</div>` +\n    `</div>` +\n    `</div>` +\n    `</foreignObject>` +\n    `</svg>`;\n\nconst txUrl = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(txSvg);\nconst contractMsgUrl = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(contractMsgSvg);\nconst accountUrl = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(accountSvg);\n\nconst options: vis.Options = {\n    layout: {\n        hierarchical: {\n            enabled: true,\n            levelSeparation: 150,\n            nodeSpacing: 100,\n            treeSpacing: 200,\n            blockShifting: true,\n            edgeMinimization: true,\n            parentCentralization: true,\n            direction: \"LR\",        // UD, DU, LR, RL\n            sortMethod: \"directed\"   // hubsize, directed\n        }\n    },\n    physics: {\n        enabled: false\n    },\n    interaction: {\n        tooltipDelay: 0\n    },\n    edges: {\n        color: {\n            color: \"black\"\n        },\n        dashes: true,\n        title: \"triggersMsg\",\n        label: \"triggersMsg\",\n        font: {\n            size: 10,\n            align: \"middle\",\n            bold: {\n                color: \"#343434\",\n                size: 14, // px\n                face: \"arial\",\n                // TODO: is this wrong in the docs?\n                vadjust: 0 as any,\n                mod: \"bold\"\n            }\n        }\n    },\n    nodes: {\n        title: \"test\",\n        color: \"white\" as any,\n        shape: \"image\",\n        font: {\n            color: \"black\" as any,\n            multi: \"md\",\n            size: 12,\n            align: \"bottom\"\n        }\n    }\n};\n\nconst removeDashes = (values: any) => {\n    values.dashes = false;\n    values.width = 3;\n};\n\nconst GRAPH_ADAPTER_NAME = \"graph\";\n\nlet globalStylesInjected = false;\n\nexport interface ITriggerGraphLayerContentProps {\n    txHash: string;\n    txGraphStore: TxGraphStore;\n    graphType: GraphSelectFieldKey;\n    translation: ITranslation;\n    logger: ILogger;\n    internalNav: IInternalNav;\n}\n@observer\nclass $TriggerGraphLayerContent extends React.Component<ITriggerGraphLayerContentProps> {\n    private dataModule: IModuleInlineDef<\n        IGraphProps<VisNode, VisEdge>, IGraphContext, { translation: ITranslation }\n    > = {\n        dataAdapters: [{\n            alias: GRAPH_ADAPTER_NAME,\n            def: {\n                contextType: {\n                    txHash: \"string\",\n                    graphType: \"string\"\n                },\n                load: ctx => this.loadGraphData(ctx)\n            }\n        }],\n        getContentComponent: async () => (await import(\"react-graph-vis\")).default,\n        getContentProps: ({asyncData}) => ({\n            graph: asyncData.get(GRAPH_ADAPTER_NAME)!.data as PrepdGraphData,\n            events: events(this.props.internalNav),\n            options,\n            style: { height: \"100%\", width: \"100%\", position: \"absolute\", top: 0, left: 0 } as React.CSSProperties\n        }),\n        getErrorPlaceholder: ({ translation }) =>\n            <ErrorBox colors=\"secondary\">{translation.get(\"general.noData.text\")}</ErrorBox>,\n        getLoadingPlaceholder: ({ translation }) =>\n            <LoadingBox colors=\"secondary\" translation={translation} />\n    };\n\n    constructor(props: ITriggerGraphLayerContentProps) {\n        super(props);\n\n        if (!globalStylesInjected) {\n            /* TODO: find a way to inject a React component inside the react-graph-vis tooltip content */\n            // tslint:disable-next-line:no-unused-expression\n            injectGlobal`\n                .vis-tooltip {\n                    color: #273656;\n                    z-index: 9990;\n                    position: absolute;\n                    padding: 6px 16px 7px;\n                    background-color: white;\n                    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.1);\n                    font-size: 16px;\n                    letter-spacing: 0.6px\n                }\n            `;\n            globalStylesInjected = true;\n        }\n    }\n\n    private async loadGraphData({ txHash, graphType }: IGraphContext) {\n        let data: IGraphData | undefined;\n        if (graphType === GraphSelectFieldKey.Message) {\n            try {\n                data = await this.props.txGraphStore.fetchMessageGraphData(txHash);\n            } catch (e) {\n                this.props.logger.error(`Couldn't fetch message graph data`, e);\n            }\n        } else if (graphType === GraphSelectFieldKey.Account) {\n            try {\n                data = await this.props.txGraphStore.fetchAccountInteractionGraphData(txHash);\n            } catch (e) {\n                this.props.logger.error(`Couldn't fetch account interaction graph data`, e);\n            }\n        } else if (graphType === GraphSelectFieldKey.Trigger) {\n            try {\n                data = await this.props.txGraphStore.fetchTriggerGraphData(txHash);\n            } catch (e) {\n                this.props.logger.error(`Couldn't fetch trigger graph data`, e);\n            }\n        } else {\n            throw new Error(`Unexpected graphType ${graphType}`);\n        }\n\n        if (data) {\n            return this.prepareGraphData(data);\n        }\n        return data;\n    }\n\n    private abbreviate(str: string) {\n        const split = str.split(\"_0x\");\n        const hex = split.pop()!;\n        const kind = split.pop()!.split(\"/\").pop();\n        return kind + \" \" + hex.substr(0, 4) + \"..\" + hex.substr(-4, 4);\n    }\n    private getIconType(type: string) {\n        const tempType = type.split(\"_\")[0];\n        if (tempType === \"Tx\") {\n            return txUrl;\n        } else if (tempType === \"ContractMsg\") {\n            return contractMsgUrl;\n        } else if (tempType === \"Account\") {\n            return accountUrl;\n        }\n        return \"\";\n    }\n    private getNodeColor(type: string) {\n        const tempType = type.split(\"_\")[0];\n        if (tempType === \"Tx\") {\n            return \"#273656\";\n        } else if (tempType === \"ContractMsg\") {\n            return \"#FF9F1C\";\n        } else if (tempType === \"Account\") {\n            return \"#A7B5D1\";\n        }\n        return \"\";\n    }\n    private prepareGraphData(data: IGraphData) {\n        let preparedEdges: VisEdge[] = (data.edges || []).map((item) => {\n            let color = {color: this.getNodeColor(item.from)};\n            return {\n                from: item.from,\n                to: item.to,\n                label: item.type.toUpperCase(),\n                color,\n                arrows: \"to\",\n                dashes: [1, 2],\n                chosen: {\n                    label: false,\n                    edge: removeDashes\n                },\n                font: {\n                    size: 10,\n                    color: color.color,\n                    face: \"Barlow-Bold\"\n                }\n            };\n        });\n        let preparedNodes: VisNode[] = (data.nodes || []).map((item) => {\n            return {\n                id: item.id,\n                title: item.id,\n                image: this.getIconType(item.id),\n                label: void 0,\n                hiddenLabel: this.abbreviate(item.id),\n                // TODO: figure out if color is wrong in .d.ts\n                color: this.getNodeColor(item.id) as any\n            };\n        });\n\n        let preparedData: PrepdGraphData = {\n            edges: preparedEdges,\n            nodes: preparedNodes\n        };\n\n        return preparedData;\n    }\n\n    render() {\n        let context: IGraphContext = { txHash: this.props.txHash, graphType: this.props.graphType };\n\n        return <InlineModule\n            moduleDef={this.dataModule}\n            context={context}\n            logger={this.props.logger}\n            extraContentProps={{\n                translation: this.props.translation\n            }}\n        />;\n    }\n}\n\nexport const TriggerGraphLayerContent = withInternalNav($TriggerGraphLayerContent);\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { observer } from \"mobx-react\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { Layer } from \"@alethio/ui/lib/overlay/Layer\";\nimport { Mask } from \"@alethio/ui/lib/overlay/Mask\";\nimport { CloseIcon } from \"@alethio/ui/lib/icon/CloseIcon\";\nimport { ToolbarIconButton } from \"@alethio/ui/lib/layout/toolbar/ToolbarIconButton\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport { TxGraphStore } from \"app/eth-extended/data/tx/graph/TxGraphStore\";\nimport { SelectGraph } from \"./SelectGraph\";\nimport { SelectFields } from \"./SelectFields\";\nimport { TriggerGraphLayerContent } from \"./TriggerGraphLayerContent\";\n\nconst StyledLayer = styled(Layer)`\n    width: 90vw;\n    height: 80vh;\n    min-height: 400px;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px solid ${props => props.theme.colors.overlayToolbarBorder};\n    box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.04);\n    padding: 8px;\n`;\n\nconst CloseIconContainer = styled.div`\n    padding: 14px;\n`;\nconst TypeContainer = styled.div`\n    display: flex;\n    padding: 12px;\n    align-items: center;\n`;\n\nconst Content = styled.div`\n    flex-grow: 1;\n    position: relative;\n`;\n\nexport interface ITriggerGraphLayerProps {\n    open: boolean;\n    txHash: string;\n    txGraphStore: TxGraphStore;\n    translation: ITranslation;\n    logger: ILogger;\n    onRequestClose?(): void;\n}\n@observer\nexport class TriggerGraphLayer extends React.Component<ITriggerGraphLayerProps> {\n    private selectFields: SelectFields;\n\n    constructor(props: ITriggerGraphLayerProps) {\n       super(props);\n       this.selectFields = new SelectFields(props.translation);\n    }\n\n    componentDidUpdate(prevProps: ITriggerGraphLayerProps) {\n        if (this.props.translation !== prevProps.translation) {\n            let oldSelectedField = this.selectFields.getSelectedField();\n            this.selectFields = new SelectFields(this.props.translation);\n            this.selectFields.setSelectedField(oldSelectedField.key);\n        }\n    }\n\n    render() {\n        let { open } = this.props;\n\n        return ( open ?\n            ReactDOM.createPortal(<>\n                <Mask />\n                <StyledLayer>\n                    <Header>\n                        <TypeContainer>\n                            <Label>\n                                {this.props.translation.get(\"txView.content.txSummary.graphSelect.type.label\")}\n                            </Label>\n                            <SelectGraph fields={this.selectFields}/>\n                        </TypeContainer>\n                        <CloseIconContainer>\n                            <ToolbarIconButton Icon={CloseIcon} onClick={this.props.onRequestClose} />\n                        </CloseIconContainer>\n                    </Header>\n                    <Content>\n                        <TriggerGraphLayerContent\n                            txHash={this.props.txHash}\n                            txGraphStore={this.props.txGraphStore}\n                            graphType={this.selectFields.getSelectedField().key}\n                            translation={this.props.translation}\n                            logger={this.props.logger}\n                        />\n                    </Content>\n                </StyledLayer>\n            </>, document.body) :\n            null\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IBubbleChartIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class BubbleChartIcon extends React.Component<IBubbleChartIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M9.51409906,12.1898011 L11.0143042,11.1511975 C10.6231374,10.4563201 10.4,9.65421832 10.4,8.8 C10.4,6.1490332 12.5490332,4 15.2,4 C17.8509668,4 20,6.1490332 20,8.8 C20,11.4509668 17.8509668,13.6 15.2,13.6 C13.7624961,13.6 12.4725817,12.9680938 11.5928808,11.9669051 L10.0839172,13.0115723 C10.2864748,13.4315377 10.4,13.9025112 10.4,14.4 C10.4,14.7130478 10.3550482,15.0155966 10.2712473,15.3015436 L13.2639161,16.7191235 C13.6307884,16.2796301 14.1827386,16 14.8,16 C15.9045695,16 16.8,16.8954305 16.8,18 C16.8,19.1045695 15.9045695,20 14.8,20 C13.6954305,20 12.8,19.1045695 12.8,18 C12.8,17.8710246 12.8122084,17.7449006 12.8355327,17.6227206 L9.84267751,16.2050524 C9.26626712,17.0473192 8.29767632,17.6 7.2,17.6 C5.4326888,17.6 4,16.1673112 4,14.4 C4,12.6326888 5.4326888,11.2 7.2,11.2 C8.11008185,11.2 8.93142974,11.5799152 9.51409906,12.1898011 Z\"\r\n                    } fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { observer } from \"mobx-react\";\nimport { observable } from \"mobx\";\nimport { TriggerGraphLayer } from \"./triggerGraph/TriggerGraphLayer\";\nimport { TxGraphStore } from \"app/eth-extended/data/tx/graph/TxGraphStore\";\nimport { Button } from \"@alethio/ui/lib/control/Button\";\nimport { BubbleChartIcon } from \"@alethio/ui/lib/icon/BubbleChartIcon\";\nimport { ILogger } from \"plugin-api/ILogger\";\n\nexport interface ITriggerGraphWrapperProps {\n    txGraphStore: TxGraphStore;\n    txHash: string;\n    translation: ITranslation;\n    logger: ILogger;\n}\n\n@observer\nexport class TriggerGraphWrapper extends React.Component<ITriggerGraphWrapperProps> {\n    @observable\n    private layerVisible = false;\n\n    render() {\n        let { translation: tr } = this.props;\n\n        return (\n            <>\n                <Button Icon={BubbleChartIcon} colors=\"secondary\" onClick={this.handleLayerToggle}>\n                    {tr.get(\"txView.content.txSummary.triggerGraph.button\")}\n                </Button>\n                <TriggerGraphLayer\n                    open={this.layerVisible}\n                    onRequestClose={this.handleLayerToggle}\n                    txHash={this.props.txHash}\n                    txGraphStore={this.props.txGraphStore}\n                    translation={tr}\n                    logger={this.props.logger}\n                />\n            </>\n        );\n    }\n\n    private handleLayerToggle = () => {\n        this.toggleLayer();\n    }\n\n    private toggleLayer() {\n        this.layerVisible = !this.layerVisible;\n    }\n}\n","import * as React from \"react\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\nimport { ThemeContext } from \"plugin-api/ThemeContext\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxDetails } from \"app/eth-extended/data/tx/details/ITxDetails\";\nimport { isFullTxDetails } from \"app/eth-extended/data/tx/details/isFullTxDetails\";\nimport { NotAvailableBox } from \"app/shared/component/NotAvailableBox\";\nimport { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\nimport { Expander } from \"@alethio/ui/lib/control/expander/Expander\";\nimport { TokenTransfersGrid } from \"./TokenTransfersGrid\";\nimport { CmGrid } from \"./CmGrid\";\nimport { AccordionVertical, IAccordionVerticalProps } from \"@alethio/ui/lib/control/accordion/AccordionVertical\";\nimport { AccordionItem } from \"@alethio/ui/lib/control/accordion/AccordionItem\";\nimport { AccordionContentFrame } from \"@alethio/ui/lib/control/accordion/AccordionContentFrame\";\nimport { TriggerGraphWrapper } from \"./TriggerGraphWrapper\";\nimport { CmLiteStore } from \"app/eth-extended/data/contractMsg/lite/CmLiteStore\";\nimport { AccordionItemContentStatus } from \"@alethio/ui/lib/control/accordion/AccordionItemContentStatus\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { TokenTransferStore } from \"app/eth-extended/data/token/transfer/TokenTransferStore\";\nimport { TxGraphStore } from \"app/eth-extended/data/tx/graph/TxGraphStore\";\nimport { LogEvents } from \"./LogEvents\";\nimport { LogEventsStore } from \"app/eth-extended/data/logEvents/LogEventsStore\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\n\ninterface ITxSummaryItemConfig extends IAccordionItemConfig {\n    label: string;\n    value: number;\n    /** Header element shown beside the expander box */\n    header?: React.ReactNode;\n    backgroundColor?(theme: ITheme): string;\n    borderColor?(theme: ITheme): string;\n}\n\nexport interface ITxSummaryProps {\n    tx: ITxDetails;\n    translation: ITranslation;\n    locale: string;\n    tokenTransferStore: TokenTransferStore;\n    cmLiteStore: CmLiteStore;\n    txGraphStore: TxGraphStore;\n    logEventsStore: LogEventsStore;\n    logger: ILogger;\n}\n\n@observer\nexport class TxSummary extends React.Component<ITxSummaryProps> {\n    @observable.shallow\n    private items: React.ReactNode;\n\n    private repressGraphTrigger = false;\n\n    constructor(props: ITxSummaryProps) {\n        super(props);\n\n        window.addEventListener(\"resize\", this.handleResize);\n        this.handleResize();\n        this.items = this.buildItems(this.props.tx);\n    }\n\n    componentDidUpdate(prevProps: ITxSummaryProps) {\n        if (this.props.tx !== prevProps.tx || this.props.translation !== prevProps.translation) {\n            this.items = this.buildItems(this.props.tx);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleResize);\n    }\n\n    private handleResize = () => {\n        let width = window.innerWidth;\n        this.repressGraphTrigger = width <= 780;\n        this.items = this.buildItems(this.props.tx);\n    }\n\n    render() {\n        const { translation: tr } = this.props;\n\n        return <LayoutSection useWrapper>\n            <AccordionVertical\n                label={tr.get(\"txView.content.txSummary.label\")}\n                noDataContent={<NotAvailableBox translation={tr} />}\n                renderExpander={this.renderExpander}\n                renderHeader={this.renderHeader}\n                renderContent={this.renderContent}\n                loadingText={`${tr.get(\"general.loading\")}...`}\n                errorText={tr.get(\"general.error\")}\n                onContentError={(e, item) => {\n                    this.props.logger.error(`Couldn't load content for tx summary tab #${item.index}`, e);\n                }}\n            >\n                {this.items}\n            </AccordionVertical>\n        </LayoutSection>;\n    }\n\n    private renderExpander: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderExpander\"] =\n    ({config, isOpen, onClick, isFullWidth}) => {\n        return <Expander\n            label={config.label}\n            value={config.value}\n            open={isOpen}\n            onClick={onClick}\n            fullWidth={isFullWidth}\n            locale={this.props.locale}\n        />;\n    }\n\n    private renderHeader: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderHeader\"] =\n    ({config}) => {\n        return config.header;\n    }\n\n    private renderContent: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderContent\"] =\n    ({ content, status, arrowPosition, config }) => {\n        if (status !== AccordionItemContentStatus.Loaded) {\n            return <LayoutRow>\n                <LayoutRowItem>\n                    <Label></Label>\n                    {content}\n                </LayoutRowItem>\n            </LayoutRow>;\n        }\n\n        return (\n            <ThemeContext.Consumer>\n                {(theme: ITheme) =>\n                    <AccordionContentFrame\n                        arrowPosition={arrowPosition}\n                        backgroundColor={\n                            config.backgroundColor && config.backgroundColor(theme) || theme.colors.gridEvenRowBg}\n                        borderColor={config.borderColor && config.borderColor(theme) || theme.colors.gridBorder}\n                        noBorder={!config.borderColor}\n                    >{content}</AccordionContentFrame>\n                }\n            </ThemeContext.Consumer>\n        );\n    }\n\n    private buildItems(tx: ITxDetails) {\n        let tr = this.props.translation;\n\n        let items = !isFullTxDetails(tx) ? null : <>\n            <AccordionItem<ITxSummaryItemConfig>\n                label={tr.get(\"txView.content.txSummary.contractMessages.label\")}\n                value={tx.contractMsgCount}\n                header={this.repressGraphTrigger ? null : <TriggerGraphWrapper\n                    txHash={tx.hash}\n                    txGraphStore={this.props.txGraphStore}\n                    translation={tr}\n                    logger={this.props.logger}\n                />}\n                content={async () => {\n                    let contractMsgs = await this.props.cmLiteStore.fetchByTx(this.props.tx.hash);\n                    return <CmGrid\n                        items={contractMsgs} translation={tr} locale={this.props.locale}\n                    />;\n                }}\n            />\n            <AccordionItem<ITxSummaryItemConfig>\n                label={tr.get(\"txView.content.txSummary.tokenTransfers.label\")}\n                value={tx.tokenTransferCount}\n                content={async () => {\n                    let tokenTransfers = await this.props.tokenTransferStore.fetchByTx(this.props.tx.hash);\n                    return <TokenTransfersGrid items={tokenTransfers} translation={tr} locale={this.props.locale} />;\n                }}\n            />\n            <AccordionItem<ITxSummaryItemConfig>\n                label={tr.get(\"txView.content.txSummary.logEvents.label\")}\n                value={tx.logEventsCount}\n                content={async () => {\n                    let logEvents = await this.props.logEventsStore.fetchByTx(this.props.tx.hash);\n                    return <LogEvents translation={tr} data={logEvents} />;\n                }}\n                backgroundColor={theme => theme.colors.logEventsSectionBg}\n                borderColor={theme => theme.colors.logEventsBorder}\n            />\n        </>;\n\n        return items;\n    }\n}\n","import * as React from \"react\";\r\nimport styled, { css } from \"../styled-components\";\r\nimport { Box, IBoxProps } from \"../layout/content/box/Box\";\r\nimport { IBoxColorsThunk } from \"../layout/content/box/IBoxColorsThunk\";\r\nimport { HoverState } from \"../util/react/HoverState\";\r\nimport { ITheme } from \"../theme/ITheme\";\r\n\r\ninterface IButtonRootProps {\r\n    floating?: boolean;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst ButtonRoot = styled<IButtonRootProps, \"div\">(\"div\")`\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    ${props => props.floating ? css`\r\n    box-shadow: 0 8px 16px rgba(167, 181, 209, 0.6);\r\n    ` : ``}\r\n    ${props => props.disabled ? css`\r\n    opacity: 0.75;\r\n    ` : void 0}\r\n`;\r\n\r\nconst StyledBox = styled(Box)`\r\n    border-radius: 4px;\r\n    transition: background-color .2s ease-in-out, border-color .2s ease-in-out;\r\n`;\r\n\r\ntype ButtonColors = \"primary\" | \"secondary\";\r\n\r\nconst colorSets: Record<ButtonColors, (hover: boolean) => IBoxColorsThunk<ITheme>> = {\r\n    primary: (hover) => (theme) => ({\r\n        background: hover ? theme.colors.buttonPrimaryBgActive : theme.colors.buttonPrimaryBg,\r\n        text: theme.colors.buttonPrimaryText\r\n    }),\r\n    secondary: (hover) => (theme) => ({\r\n        background: hover ? theme.colors.buttonSecondaryBgActive : theme.colors.buttonSecondaryBg,\r\n        text: theme.colors.buttonSecondaryText\r\n    })\r\n};\r\n\r\nexport interface IButtonProps {\r\n    Icon?: IBoxProps[\"Icon\"];\r\n    iconPlacement?: IBoxProps[\"iconPlacement\"];\r\n    colors?: ButtonColors;\r\n    floating?: boolean;\r\n    children?: string;\r\n    disabled?: boolean;\r\n    onClick?(): void;\r\n}\r\n\r\nexport class Button extends React.Component<IButtonProps> {\r\n    static defaultProps: Partial<IButtonProps> = {\r\n        colors: \"secondary\"\r\n    };\r\n\r\n    render() {\r\n        let { Icon, iconPlacement, floating, disabled, colors, children} = this.props;\r\n        return (\r\n            <HoverState>\r\n                {(hover) =>\r\n                <ButtonRoot\r\n                    onClick={!this.props.disabled ? this.props.onClick : void 0}\r\n                    floating={floating}\r\n                    disabled={disabled}\r\n                >\r\n                    <StyledBox\r\n                        Icon={Icon}\r\n                        iconPlacement={iconPlacement ? iconPlacement : \"left\"}\r\n                        colors={colorSets[colors!](!this.props.disabled ? hover : false)}\r\n                        metrics={{\r\n                            fontSize: 12,\r\n                            lineHeight: 14,\r\n                            fontWeight: 700,\r\n                            height: 36,\r\n                            iconSize: 24,\r\n                            letterSpacing: .4,\r\n                            textPaddingTop: 9,\r\n                            textPaddingX: 16\r\n                        }}\r\n                    >{children}</StyledBox>\r\n                </ButtonRoot>\r\n                }\r\n            </HoverState>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IRadioOnIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class RadioOnIcon extends React.Component<IRadioOnIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z M12,16 C9.790861,16 8,14.209139 8,12 C8,9.790861 9.790861,8 12,8 C14.209139,8 16,9.790861 16,12 C16,14.209139 14.209139,16 12,16 Z\"\r\n                    } fill=\"currentColor\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IRadioOffIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class RadioOffIcon extends React.Component<IRadioOffIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z\"\r\n                    } fill=\"currentColor\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport styled from \"../styled-components\";\r\nimport { RadioOnIcon } from \"../icon/RadioOnIcon\";\r\nimport { RadioOffIcon } from \"../icon/RadioOffIcon\";\r\n\r\nconst RadioWrapper = styled.div`\r\n    padding: 8px 8px 8px 32px;\r\n    position: relative;\r\n`;\r\nconst RadioLabel = styled.label`\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    font-weight: 600;\r\n    color: ${({theme}) => theme.colors.checkboxLabel};\r\n`;\r\nconst RadioIconWrapper = styled.div`\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 4px;\r\n    color: ${({theme}) => theme.colors.checkboxIcon};\r\n`;\r\n\r\ninterface IRadioProps {\r\n    id: string;\r\n    name: string;\r\n    value?: string | number;\r\n    checked?: boolean;\r\n    onChange?(\r\n        event: React.ChangeEvent<HTMLInputElement>,\r\n        checked: boolean,\r\n        name: string,\r\n        value?: string | number\r\n    ): void;\r\n}\r\n\r\n@observer\r\nexport class Radio extends React.Component<IRadioProps> {\r\n    render() {\r\n        return (\r\n            <RadioWrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    id={this.props.id}\r\n                    name={\"radio_\" + this.props.name}\r\n                    value={this.props.value}\r\n                    checked={this.props.checked || false}\r\n                    onChange={this.onChange}\r\n                    style={{display: \"none\"}}\r\n                />\r\n                <RadioLabel htmlFor={this.props.id}>\r\n                    <RadioIconWrapper>\r\n                        { this.props.checked ? <RadioOnIcon /> : <RadioOffIcon />}\r\n                    </RadioIconWrapper>\r\n                    {this.props.children}\r\n                </RadioLabel>\r\n            </RadioWrapper>\r\n        );\r\n    }\r\n\r\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(event, true, this.props.name, this.props.value);\r\n        }\r\n    }\r\n}\r\n","import styled from \"@alethio/ui/lib/styled-components\";\r\n\r\ninterface IHighlightSelectBoxProps {\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const HighlightSelectBox = styled<IHighlightSelectBoxProps, \"div\">(\"div\")`\r\n    font-size: 12px;\r\n    height: 28px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    padding: 0px 32px 0px 24px;\r\n    box-sizing: border-box;\r\n    border: 1px solid ${props => props.theme.colors.selectBoxBorder};\r\n    border-radius: 4px;\r\n    background-color: ${props => props.theme.colors.selectBoxBg};\r\n    vertical-align: middle;\r\n    line-height: 24px;\r\n    color: ${props => !props.disabled ? props.theme.colors.selectBoxText : props.theme.colors.selectBoxTextDisabled};\r\n    cursor: ${props => props.disabled ? \"default\" : \"pointer\"};\r\n\r\n    position: relative;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n\r\n        border-radius: 50%;\r\n        background-color: ${props => !props.disabled ?\r\n            props.theme.colors.selectBoxBubble :\r\n            props.theme.colors.selectBoxTextDisabled};\r\n        width: 8px;\r\n        height: 8px;\r\n        top: 9px;\r\n        left: 8px;\r\n    }\r\n    &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n\r\n        top: 10px;\r\n        right: 11px;\r\n        border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n    }\r\n`;\r\n"],"sourceRoot":""}