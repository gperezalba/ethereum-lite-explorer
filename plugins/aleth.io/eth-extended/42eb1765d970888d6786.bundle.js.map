{"version":3,"sources":["webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/tx/TxLinkRenderer.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/RadioOnIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/RadioOffIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/Radio.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/box/HighlightSelectBox.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHighlight/TxHighlightSelector.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/ViewSelectorButton.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/ListViewIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/GridViewIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/ViewSelectorBox.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/BlockTxsState.ts","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/TxsViewMode.ts","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHighlight/HighlightFields.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/txHighlight/HighlightFieldKey.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/txHighlight/HighlightFieldsFull.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/BlockTxsStateFactory.ts","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/TxTooltipContentWrapper.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/TxTooltipContent.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHeatMap/TxBubble.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHeatMap/TxsHeatMapItem.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHeatMap/TxsHeatMapItems.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/blockTxs/txHeatMap/TxsHeatMap.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/txsGrid/TxHighlight.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/txsGrid/TxHighlightRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/txsGrid/TxGridFields.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/TxsGrid.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockTxs/component/BlockTxs.tsx"],"names":["__webpack_require__","d","__webpack_exports__","TxLinkRenderer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_alethio_ui_lib_data_Hash__WEBPACK_IMPORTED_MODULE_1__","_GridLink__WEBPACK_IMPORTED_MODULE_2__","[object Object]","gridFieldDataGetter","this","f","hash","to","RadioOnIcon_RadioOnIcon","external_react_","SvgIcon","Object","assign","props","stroke","strokeWidth","fill","fillRule","points","RadioOffIcon_RadioOffIcon","RadioWrapper","styled_components","div","RadioLabel","label","theme","colors","checkboxLabel","RadioIconWrapper","checkboxIcon","Radio_Radio","Radio","onChange","event","name","value","type","id","checked","style","display","htmlFor","children","tslib_es6","external_mobx_react_","HighlightSelectBox","_alethio_ui_lib_styled_components__WEBPACK_IMPORTED_MODULE_0__","selectBoxBorder","selectBoxBg","disabled","selectBoxTextDisabled","selectBoxText","selectBoxBubble","selectBoxArrow","TxHighlightSelector_TxHighlightSelector","TxHighlightSelector","onCheckboxChange","_e","_name","fields","setSelectedField","requestClose","translation","tr","SelectBox","offset","left","top","render","getFields","map","key","getSelectedField","getLabel","HEIGHT","$ViewSelectorButton","className","onClick","ViewSelectorButton","lib_styled_components","active","txViewSelector","txViewSelectorActive","ListViewIcon_ListViewIcon","GridViewIcon_GridViewIcon","ViewSelectorBox_HEIGHT","ViewSelectorRoot","ViewSelectorBox_ViewSelectorBox","ViewSelectorBox","onListClick","txsViewMode","setToTableList","onGridClick","setToHeatMapGrid","isTableList","isHeatMapGrid","BlockTxsState","txsHighlightFields","txsGridSortingOptions","ViewModes","TxsViewMode","getTxsViewMode","mode","setTxsViewMode","external_mobx_","HighlightFields","selectedField","field","find","HighlightFieldKey","HighlightFieldsFull_HighlightFieldsFull","super","Value","t","get","getData","tx","ContractMessageCount","contractMsgCount","GasUsed","gasUsed","GasPrice","gasPrice","GasLimit","gasLimit","ContractCreationCount","contractCreationCount","BlockTxsStateFactory_BlockTxsStateFactory","GridSortingOptions","TxTooltipContentWrapper","TxTooltipContent_TxTooltipContent","TxHashBox","variant","Label","AddressHashBox","from","TxType","Create","Icon","ContractIcon","paddingLeft","arrow","isZero","EthValueBox","wei","locale","latestEthPrice","UsdValueBox","multipliedBy","toNumber","TxBubble","size","highlightThreshold","ThemeContext_","Consumer","Bubble","wrapperSize","spacing","bubbleWrapperSize","backgroundColor","txColorCode","TxsHeatMapItem_TxsHeatMapItem","handleMouseEnter","onMouseEnter","handleMouseLeave","onMouseLeave","DomNodeProxy","onMount","el","addEventListener","onUnmount","removeEventListener","Link_","bubbleSize","TxsHeatMapItems_TxsHeatMapItems","bubbleSizes","transactions","idx","onTxMouseEnter","onTxMouseLeave","TxsHeatMapRoot","TxsHeatMap_TxsHeatMap","TxsHeatMap","handleActiveChange","hoveredTx","handleTxEnter","multiHover","enter","handleTxLeave","leave","handleTooltipEnter","handleTooltipLeave","setupMultiHover","MultiHover","enterDelay","leaveDelay","onActiveChange","subscribe","prevProps","unsubscribe","values","highlightDataSelector","scaleValuesFn","innerRef","ref","rootEl","Popover","visible","placement","alignmentOffset","noFlip","noArrow","referenceElement","content","txTooltipThunk","TxHighlight","withConfig","displayName","componentId","highlight","TxHighlightRenderer_TxHighlightRenderer","TxGridFields_TxGridFields","GridFields","highlightFn","fieldKey","ITxGridFieldKeys","Type","isSortable","selected","getFieldValue","renderer","Hash","alwaysVisible","From","AccountLinkRenderer","To","EthRenderer","Fee","TxsGridRoot","TxsGrid_TxsGrid","TxsGrid","data","percentLog","scaledHighlightValues","Error","gridFields","gridSortingOptions","highlightValues","computeScaledHighlightValues","rows","Grid","sortingOptions","Map","minMaxLogScale","forEach","v","i","set","HIGHLIGHT_THRESHOLD","BlockTxs_BlockTxs","BlockTxs","external_react_default","a","Component","renderHeatMapTooltip","createElement","blockTxsState","uiStateContainer","create","txs","Fragment","LayoutRow","minWidth","LayoutRowItem","TxCountBox","length","fullRow","autoHeight","maxWidth","Spacer","height"],"mappings":"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","file":"42eb1765d970888d6786.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { Hash } from \"@alethio/ui/lib/data/Hash\";\r\nimport { GridLink } from \"../../GridLink\";\r\n\r\nexport class TxLinkRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private gridFieldDataGetter: (f: T) => string\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        let hash = this.gridFieldDataGetter(f);\r\n        return (\r\n            <GridLink to={`page://aleth.io/tx?txHash=${hash}`} >\r\n                <Hash>{ hash }</Hash>\r\n            </GridLink>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IRadioOnIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class RadioOnIcon extends React.Component<IRadioOnIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z M12,16 C9.790861,16 8,14.209139 8,12 C8,9.790861 9.790861,8 12,8 C14.209139,8 16,9.790861 16,12 C16,14.209139 14.209139,16 12,16 Z\"\r\n                    } fill=\"currentColor\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IRadioOffIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class RadioOffIcon extends React.Component<IRadioOffIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M12,20 C7.581722,20 4,16.418278 4,12 C4,7.581722 7.581722,4 12,4 C16.418278,4 20,7.581722 20,12 C20,16.418278 16.418278,20 12,20 Z M12,18 C15.3137085,18 18,15.3137085 18,12 C18,8.6862915 15.3137085,6 12,6 C8.6862915,6 6,8.6862915 6,12 C6,15.3137085 8.6862915,18 12,18 Z\"\r\n                    } fill=\"currentColor\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport styled from \"../styled-components\";\r\nimport { RadioOnIcon } from \"../icon/RadioOnIcon\";\r\nimport { RadioOffIcon } from \"../icon/RadioOffIcon\";\r\n\r\nconst RadioWrapper = styled.div`\r\n    padding: 8px 8px 8px 32px;\r\n    position: relative;\r\n`;\r\nconst RadioLabel = styled.label`\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    font-weight: 600;\r\n    color: ${({theme}) => theme.colors.checkboxLabel};\r\n`;\r\nconst RadioIconWrapper = styled.div`\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 4px;\r\n    color: ${({theme}) => theme.colors.checkboxIcon};\r\n`;\r\n\r\ninterface IRadioProps {\r\n    id: string;\r\n    name: string;\r\n    value?: string | number;\r\n    checked?: boolean;\r\n    onChange?(\r\n        event: React.ChangeEvent<HTMLInputElement>,\r\n        checked: boolean,\r\n        name: string,\r\n        value?: string | number\r\n    ): void;\r\n}\r\n\r\n@observer\r\nexport class Radio extends React.Component<IRadioProps> {\r\n    render() {\r\n        return (\r\n            <RadioWrapper>\r\n                <input\r\n                    type=\"radio\"\r\n                    id={this.props.id}\r\n                    name={\"radio_\" + this.props.name}\r\n                    value={this.props.value}\r\n                    checked={this.props.checked || false}\r\n                    onChange={this.onChange}\r\n                    style={{display: \"none\"}}\r\n                />\r\n                <RadioLabel htmlFor={this.props.id}>\r\n                    <RadioIconWrapper>\r\n                        { this.props.checked ? <RadioOnIcon /> : <RadioOffIcon />}\r\n                    </RadioIconWrapper>\r\n                    {this.props.children}\r\n                </RadioLabel>\r\n            </RadioWrapper>\r\n        );\r\n    }\r\n\r\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(event, true, this.props.name, this.props.value);\r\n        }\r\n    }\r\n}\r\n","import styled from \"@alethio/ui/lib/styled-components\";\r\n\r\ninterface IHighlightSelectBoxProps {\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const HighlightSelectBox = styled<IHighlightSelectBoxProps, \"div\">(\"div\")`\r\n    font-size: 12px;\r\n    height: 28px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    padding: 0px 32px 0px 24px;\r\n    box-sizing: border-box;\r\n    border: 1px solid ${props => props.theme.colors.selectBoxBorder};\r\n    border-radius: 4px;\r\n    background-color: ${props => props.theme.colors.selectBoxBg};\r\n    vertical-align: middle;\r\n    line-height: 24px;\r\n    color: ${props => !props.disabled ? props.theme.colors.selectBoxText : props.theme.colors.selectBoxTextDisabled};\r\n    cursor: ${props => props.disabled ? \"default\" : \"pointer\"};\r\n\r\n    position: relative;\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n\r\n        border-radius: 50%;\r\n        background-color: ${props => !props.disabled ?\r\n            props.theme.colors.selectBoxBubble :\r\n            props.theme.colors.selectBoxTextDisabled};\r\n        width: 8px;\r\n        height: 8px;\r\n        top: 9px;\r\n        left: 8px;\r\n    }\r\n    &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n\r\n        top: 10px;\r\n        right: 11px;\r\n        border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n        border-left: 5px solid transparent;\r\n        border-right: 5px solid transparent;\r\n    }\r\n`;\r\n","import * as React from \"react\";\r\nimport { observer, Observer } from \"mobx-react\";\r\nimport { SelectBox } from \"@alethio/ui/lib/control/SelectBox\";\r\nimport { Radio } from \"@alethio/ui/lib/control/Radio\";\r\nimport { HighlightSelectBox } from \"../../box/HighlightSelectBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { HighlightFields } from \"./HighlightFields\";\r\n\r\ninterface ITxHighlightSelectorProps<TItem, THighlightFieldKey extends string> {\r\n    fields: HighlightFields<TItem, THighlightFieldKey>;\r\n    translation: ITranslation;\r\n    disabled?: boolean;\r\n}\r\n\r\n@observer\r\nexport class TxHighlightSelector<TItem, THighlightFieldKey extends string>\r\nextends React.Component<ITxHighlightSelectorProps<TItem, THighlightFieldKey>> {\r\n    private requestClose: () => void;\r\n\r\n    render() {\r\n        let { translation: tr } = this.props;\r\n        return (\r\n            <SelectBox disabled={this.props.disabled} offset={{left: -20, top: -47}} render={({requestClose}) => {\r\n                this.requestClose = requestClose;\r\n                return (\r\n                    <Observer>\r\n                        {() => this.props.fields.getFields().map((f) => {\r\n                            return (\r\n                                <Radio\r\n                                    id={\"highlight_\" + f.key}\r\n                                    key={f.key}\r\n                                    value={f.key}\r\n                                    name=\"highlight\"\r\n                                    checked={this.props.fields.getSelectedField().key === f.key}\r\n                                    onChange={this.onCheckboxChange}\r\n                                >{f.getLabel(tr)}</Radio>\r\n                            );\r\n                        })}\r\n                    </Observer>\r\n                );\r\n            }}>\r\n                <HighlightSelectBox disabled={this.props.disabled}>\r\n                    { this.props.fields.getSelectedField().getLabel(tr) }\r\n                </HighlightSelectBox>\r\n            </SelectBox>\r\n        );\r\n    }\r\n\r\n    private onCheckboxChange = (\r\n        _e: React.ChangeEvent<HTMLInputElement>,\r\n        checked: boolean,\r\n        _name: string,\r\n        value: string\r\n    ) => {\r\n        if (checked) {\r\n            this.props.fields.setSelectedField(value);\r\n        }\r\n        this.requestClose();\r\n    }\r\n}\r\n","import styled from \"../styled-components\";\r\nimport * as React from \"react\";\r\n\r\nconst HEIGHT = 28;\r\ninterface IViewSelectorButtonProps {\r\n    active?: boolean;\r\n    className?: string;\r\n    onClick?(): void;\r\n}\r\nconst $ViewSelectorButton: React.StatelessComponent<IViewSelectorButtonProps> = ({ children, className, onClick }) => (\r\n    <div className={className} onClick={onClick}>{children}</div>\r\n);\r\nexport const ViewSelectorButton = styled($ViewSelectorButton)`\r\n    height: ${HEIGHT}px;\r\n    width: ${HEIGHT}px;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    padding: 1px;\r\n    border: 1px solid ${({active, theme}) => active ? theme.colors.txViewSelector : \"transparent\"};\r\n    color: ${({active, theme}) => active ? theme.colors.txViewSelectorActive : theme.colors.txViewSelector};\r\n    &:hover {\r\n        border: 1px solid ${({theme}) => theme.colors.txViewSelector};\r\n        color: ${({theme}) => theme.colors.txViewSelectorActive};\r\n    }\r\n`;\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IListViewIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class ListViewIcon extends React.Component<IListViewIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M4,20 L8,20 L8,4 L4,4 L4,20 Z M10,4 L10,20 L14,20 L14,4 L10,4 Z M16,4 L16,20 L20,20 L20,4 L16,4 Z\"\r\n                    } fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IGridViewIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class GridViewIcon extends React.Component<IGridViewIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M4,11 L11,11 L11,4 L4,4 L4,11 Z M4,20 L11,20 L11,13 L4,13 L4,20 Z M13,20 L20,20 L20,13 L13,13 L13,20 Z M13,4 L13,11 L20,11 L20,4 L13,4 Z\"\r\n                    } fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import styled from \"@alethio/ui/lib/styled-components\";\r\nimport * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { ViewSelectorButton } from \"./ViewSelectorButton\";\r\nimport { TxsViewMode } from \"./TxsViewMode\";\r\nimport { ListViewIcon } from \"@alethio/ui/lib/icon/ListViewIcon\";\r\nimport { GridViewIcon } from \"@alethio/ui/lib/icon/GridViewIcon\";\r\n\r\nconst HEIGHT = 28;\r\nconst ViewSelectorRoot = styled.div`\r\n    padding: 0 7px;\r\n    display: flex;\r\n    width: ${2 * HEIGHT + 24}px;\r\n    justify-content: space-between;\r\n`;\r\n\r\ninterface IViewSelectorBoxProps {\r\n    txsViewMode: TxsViewMode;\r\n}\r\n\r\n@observer\r\nexport class ViewSelectorBox extends React.Component<IViewSelectorBoxProps> {\r\n    private onListClick = () => {\r\n        this.props.txsViewMode.setToTableList();\r\n    }\r\n    private onGridClick = () => {\r\n        this.props.txsViewMode.setToHeatMapGrid();\r\n    }\r\n    render() {\r\n        return (\r\n            <ViewSelectorRoot>\r\n                <ViewSelectorButton active={this.props.txsViewMode.isTableList} onClick={this.onListClick}>\r\n                    <ListViewIcon />\r\n                </ViewSelectorButton>\r\n                <ViewSelectorButton active={this.props.txsViewMode.isHeatMapGrid} onClick={this.onGridClick}>\r\n                    <GridViewIcon />\r\n                </ViewSelectorButton>\r\n            </ViewSelectorRoot>\r\n        );\r\n    }\r\n}\r\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./txHighlight/HighlightFieldKey\";\n\nexport class BlockTxsState {\n    constructor(\n        public txsViewMode: TxsViewMode,\n        public txsHighlightFields: HighlightFields<ITxLite, HighlightFieldKey>,\n        public txsGridSortingOptions: GridSortingOptions\n    ) {\n\n    }\n}\n","import { observable, computed, action } from \"mobx\";\r\n\r\nconst enum ViewModes {\r\n    TableList,\r\n    HeatMapGrid\r\n}\r\n\r\nexport class TxsViewMode {\r\n    @observable\r\n    private txsViewMode = ViewModes.HeatMapGrid;\r\n\r\n    @computed\r\n    public get getTxsViewMode() {\r\n        return this.txsViewMode;\r\n    }\r\n\r\n    @action\r\n    private setTxsViewMode(mode: number) {\r\n        this.txsViewMode = mode;\r\n    }\r\n\r\n    public setToTableList() {\r\n        this.setTxsViewMode(ViewModes.TableList);\r\n    }\r\n\r\n    public setToHeatMapGrid() {\r\n        this.setTxsViewMode(ViewModes.HeatMapGrid);\r\n    }\r\n\r\n    @computed get isTableList() {\r\n        return this.txsViewMode === ViewModes.TableList;\r\n    }\r\n\r\n    @computed get isHeatMapGrid() {\r\n        return this.txsViewMode === ViewModes.HeatMapGrid;\r\n    }\r\n}\r\n","import { observable, action } from \"mobx\";\r\nimport { BigNumber } from \"@alethio/ui/lib/util/BigNumber\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\n\r\ninterface IHighlightField<TTxData, THighlightFieldKey extends string> {\r\n    key: THighlightFieldKey;\r\n    getLabel(t: ITranslation): string;\r\n    getData(t: TTxData): number | BigNumber;\r\n}\r\n\r\nexport class HighlightFields<TTxData, THighlightFieldKey extends string> {\r\n    protected fields: IHighlightField<TTxData, THighlightFieldKey>[];\r\n\r\n    @observable\r\n    protected selectedField: IHighlightField<TTxData, THighlightFieldKey>;\r\n\r\n    getFields() {\r\n        return this.fields;\r\n    }\r\n\r\n    getSelectedField() {\r\n        return this.selectedField;\r\n    }\r\n\r\n    @action setSelectedField(key: string) {\r\n        const field = this.fields.find((f: IHighlightField<TTxData, THighlightFieldKey>) => {\r\n            return key === f.key;\r\n        });\r\n        if (field) {\r\n            this.selectedField = field;\r\n        }\r\n    }\r\n}\r\n","export enum HighlightFieldKey {\n    Value = \"value\",\n    ContractMessageCount = \"cmcount\",\n    GasUsed = \"gasused\",\n    GasPrice = \"gasprice\",\n    GasLimit = \"gaslimit\",\n    ContractCreationCount = \"ccreationcount\"\n}\n","import { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./HighlightFieldKey\";\n\nexport class HighlightFieldsFull extends HighlightFields<ITxLite, HighlightFieldKey> {\n    constructor() {\n        super();\n        this.fields = [{\n            key: HighlightFieldKey.Value,\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.value.label\"),\n            getData: tx => tx.value\n        }, {\n            key: HighlightFieldKey.ContractMessageCount,\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.contractMessageCount.label\"),\n            getData: tx => tx.contractMsgCount\n        }, {\n            key: HighlightFieldKey.GasUsed,\n            getLabel: t => t.get(\"general.gasUsed\"),\n            getData: tx => tx.gasUsed\n        }, {\n            key: HighlightFieldKey.GasPrice,\n            getLabel: t => t.get(\"general.gasPrice\"),\n            getData: tx => tx.gasPrice\n        }, {\n            key: HighlightFieldKey.GasLimit,\n            getLabel: t => t.get(\"general.gasLimit\"),\n            getData: tx => tx.gasLimit\n        }, {\n            key: HighlightFieldKey.ContractCreationCount,\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.contractCreationCount.label\"),\n            getData: tx => tx.contractCreationCount\n        }];\n        this.setSelectedField(HighlightFieldKey.Value);\n    }\n}\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { BlockTxsState } from \"./BlockTxsState\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFieldsFull } from \"./txHighlight/HighlightFieldsFull\";\n\nexport class BlockTxsStateFactory {\n    create() {\n        return new BlockTxsState(\n            new TxsViewMode(),\n            new HighlightFieldsFull(),\n            new GridSortingOptions()\n        );\n    }\n}\n","import styled from \"@alethio/ui/lib/styled-components\";\r\n\r\nexport const TxTooltipContentWrapper = styled.div`\r\n    display: flex;\r\n    padding: 8px 8px 8px 0;\r\n\r\n    > * {\r\n        margin-left: 8px;\r\n    }\r\n`;\r\n","import * as React from \"react\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\nimport { UsdValueBox } from \"@alethio/ui/lib/data/box/UsdValueBox\";\nimport { ContractIcon } from \"@alethio/ui/lib/icon/ContractIcon\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxHashBox } from \"@alethio/explorer-ui/lib/box/tx/TxHashBox\";\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxType } from \"app/eth-extended/data/tx/TxType\";\nimport { weiToEth } from \"app/util/wei\";\nimport { TxTooltipContentWrapper } from \"@alethio/explorer-ui/lib/blockTxs/TxTooltipContentWrapper\";\n\nexport interface ITxTooltipContentProps {\n    tx: ITxLite;\n    latestEthPrice: number | undefined;\n    translation: ITranslation;\n    locale: string;\n}\n\nexport class TxTooltipContent extends React.Component<ITxTooltipContentProps> {\n    render() {\n        let { tx, translation } = this.props;\n        return (\n            <TxTooltipContentWrapper>\n                <TxHashBox variant=\"small\">{tx.hash}</TxHashBox>\n                <Label>{translation.get(\"general.from\")}</Label>\n                <AddressHashBox variant=\"small\">{tx.from}</AddressHashBox>\n                {tx.type === TxType.Create ?\n                <>\n                <Label>{translation.get(\"general.creates\")}</Label>\n                <AddressHashBox variant=\"small\" Icon={ContractIcon}>{tx.to}</AddressHashBox>\n                </>\n                :\n                <>\n                <Label>{translation.get(\"general.to\")}</Label>\n                <AddressHashBox variant=\"small\">{tx.to}</AddressHashBox>\n                </>\n                }\n                <div style={{paddingLeft: 8}}>\n                    <Label arrow disabled={tx.value.isZero()}>{translation.get(\"txTooltip.value.label\")}</Label>\n                </div>\n                <div style={{display: \"flex\"}}>\n                    <EthValueBox variant=\"smallThin\" wei={tx.value} locale={this.props.locale} />\n                    { this.props.latestEthPrice ?\n                    <UsdValueBox variant=\"smallThin\"\n                        value={weiToEth(tx.value).multipliedBy(this.props.latestEthPrice).toNumber()}\n                        locale={this.props.locale} />\n                    : null }\n                </div>\n            </TxTooltipContentWrapper>\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport { Bubble } from \"@alethio/ui/lib/data/vis/Bubble\";\r\nimport { ThemeContext } from \"plugin-api/ThemeContext\";\r\nimport { ITheme } from \"../../theme/ITheme\";\r\n\r\ninterface ITxBubbleProps {\r\n    size: number;\r\n    highlightThreshold: number;\r\n}\r\n\r\nexport const TxBubble: React.StatelessComponent<ITxBubbleProps> = ({ size, highlightThreshold }) => (\r\n    <ThemeContext.Consumer>\r\n        {(theme: ITheme) =>\r\n            <Bubble\r\n                size={size}\r\n                wrapperSize={theme.spacing.bubbleWrapperSize}\r\n                highlightThreshold={highlightThreshold}\r\n                backgroundColor={theme.colors.txColorCode} />\r\n        }\r\n    </ThemeContext.Consumer>\r\n);\r\n","import * as React from \"react\";\r\nimport { DomNodeProxy } from \"@alethio/ui/lib/util/react/DomNodeProxy\";\r\nimport { Link } from \"plugin-api/component/Link\";\r\nimport { TxBubble } from \"./TxBubble\";\r\nimport { ITxGeneric } from \"./ITxGeneric\";\r\n\r\nexport interface ITxsHeatMapItemProps {\r\n    tx: ITxGeneric;\r\n    bubbleSize: number;\r\n    highlightThreshold: number;\r\n    onMouseEnter(tx: ITxGeneric): void;\r\n    onMouseLeave(tx: ITxGeneric): void;\r\n}\r\n\r\nexport class TxsHeatMapItem extends React.PureComponent<ITxsHeatMapItemProps> {\r\n    render() {\r\n        return (\r\n            <DomNodeProxy\r\n                onMount={el => {\r\n                    el.addEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.addEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                }}\r\n                onUnmount={el => {\r\n                    el.removeEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.removeEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                }}\r\n            >\r\n                <Link to={`page://aleth.io/tx?txHash=${this.props.tx.hash}`}>\r\n                    <TxBubble size={this.props.bubbleSize} highlightThreshold={this.props.highlightThreshold} />\r\n                </Link>\r\n            </DomNodeProxy>\r\n        );\r\n    }\r\n\r\n    private handleMouseEnter = () => {\r\n        this.props.onMouseEnter(this.props.tx);\r\n    }\r\n\r\n    private handleMouseLeave = () => {\r\n        this.props.onMouseLeave(this.props.tx);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { TxsHeatMapItem } from \"./TxsHeatMapItem\";\r\nimport { ITxGeneric } from \"./ITxGeneric\";\r\n\r\nexport interface ITxsHeatMapItemsProps {\r\n    transactions: ITxGeneric[];\r\n    bubbleSizes: number[];\r\n    highlightThreshold: number;\r\n    onTxMouseEnter(tx: ITxGeneric): void;\r\n    onTxMouseLeave(tx: ITxGeneric): void;\r\n}\r\n\r\nexport class TxsHeatMapItems extends React.PureComponent<ITxsHeatMapItemsProps> {\r\n    render() {\r\n        let { bubbleSizes, highlightThreshold } = this.props;\r\n\r\n        return <>\r\n            {this.props.transactions.map((tx, idx) => (\r\n                <TxsHeatMapItem\r\n                    key={idx}\r\n                    tx={tx}\r\n                    bubbleSize={bubbleSizes[idx]}\r\n                    highlightThreshold={highlightThreshold}\r\n                    onMouseEnter={this.props.onTxMouseEnter}\r\n                    onMouseLeave={this.props.onTxMouseLeave}\r\n                />\r\n            ))}\r\n        </>;\r\n    }\r\n}\r\n","import styled from \"@alethio/ui/lib/styled-components\";\r\nimport * as React from \"react\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Popover } from \"@alethio/ui/lib/overlay/Popover\";\r\nimport { MultiHover } from \"@alethio/ui/lib/util/react/MultiHover\";\r\nimport { TxsHeatMapItems } from \"./TxsHeatMapItems\";\r\nimport { ITxGeneric } from \"./ITxGeneric\";\r\nimport { BigNumber } from \"@alethio/ui/lib/util/BigNumber\";\r\n\r\nconst TxsHeatMapRoot = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex: 1 1 auto;\r\n    padding: 2px 0px;\r\n`;\r\n\r\nexport interface ITxsHeatMapProps {\r\n    /** Non-empty transactions array */\r\n    transactions: ITxGeneric[];\r\n    multiHover?: MultiHover<ITxGeneric>;\r\n    highlightThreshold: number;\r\n    highlightDataSelector(t: ITxGeneric): number | BigNumber;\r\n    scaleValuesFn(values: (number | BigNumber)[]): number[];\r\n    txTooltipThunk(t: ITxGeneric): JSX.Element;\r\n}\r\n\r\n@observer\r\nexport class TxsHeatMap extends React.Component<ITxsHeatMapProps> {\r\n    private rootEl: HTMLElement;\r\n    @observable.ref\r\n    private hoveredTx: ITxGeneric | undefined;\r\n    private multiHover: MultiHover<ITxGeneric>;\r\n\r\n    constructor(props: ITxsHeatMapProps) {\r\n        super(props);\r\n\r\n        this.setupMultiHover(this.props.multiHover);\r\n    }\r\n\r\n    private setupMultiHover(multiHover: MultiHover<ITxGeneric> | undefined) {\r\n        if (!multiHover) {\r\n            multiHover = new MultiHover({ enterDelay: 400, leaveDelay: 400 });\r\n        }\r\n        this.multiHover = multiHover;\r\n        this.multiHover.onActiveChange.subscribe(this.handleActiveChange);\r\n    }\r\n\r\n    private handleActiveChange = (tx: ITxGeneric | undefined) => this.hoveredTx = tx;\r\n\r\n    componentDidUpdate(prevProps: ITxsHeatMapProps) {\r\n        if (this.props.multiHover !== prevProps.multiHover) {\r\n            this.setupMultiHover(this.props.multiHover);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.multiHover.onActiveChange.unsubscribe(this.handleActiveChange);\r\n    }\r\n\r\n    render() {\r\n        let values = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));\r\n        let bubbleSizes = this.props.scaleValuesFn(values);\r\n\r\n        return (\r\n            <TxsHeatMapRoot innerRef={ref => this.rootEl = ref}>\r\n                <TxsHeatMapItems\r\n                    transactions={this.props.transactions}\r\n                    bubbleSizes={bubbleSizes}\r\n                    highlightThreshold={this.props.highlightThreshold}\r\n                    onTxMouseEnter={this.handleTxEnter}\r\n                    onTxMouseLeave={this.handleTxLeave}\r\n                />\r\n                <Popover\r\n                    visible={this.hoveredTx !== void 0}\r\n                    placement=\"bottom-start\"\r\n                    offset={8}\r\n                    alignmentOffset={-8}\r\n                    noFlip\r\n                    noArrow\r\n                    referenceElement={() => this.rootEl}\r\n                    content={<div onMouseEnter={this.handleTooltipEnter} onMouseLeave={this.handleTooltipLeave}>\r\n                        { this.props.txTooltipThunk(this.hoveredTx!) }\r\n                    </div>}\r\n                >\r\n                    <div />\r\n                </Popover>\r\n            </TxsHeatMapRoot>\r\n        );\r\n    }\r\n\r\n    private handleTxEnter = (tx?: ITxGeneric) => {\r\n        this.multiHover.enter(tx);\r\n    }\r\n\r\n    private handleTxLeave = (tx?: ITxGeneric) => {\r\n        this.multiHover.leave();\r\n    }\r\n\r\n    private handleTooltipEnter = () => {\r\n        this.multiHover.enter(this.hoveredTx);\r\n    }\r\n\r\n    private handleTooltipLeave = () => {\r\n        this.multiHover.leave();\r\n    }\r\n}\r\n","import styled, { css } from \"@alethio/explorer-ui/lib/styled-components\";\n\ninterface ITxHighlightProps {\n    highlight: boolean;\n}\n\nexport const TxHighlight = styled<ITxHighlightProps, \"div\">(\"div\")`\n    ${({highlight}) => highlight ? css`\n        position: relative;\n        &:before {\n            content: \"\";\n            position: absolute;\n\n            border-radius: 50%;\n            background-color: ${props => props.theme.colors.selectBoxBubble};\n            width: 8px;\n            height: 8px;\n            top: 5px;\n            left: -15px;\n        }\n    ` : \"\"}\n`;\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxType } from \"app/eth-extended/data/tx/TxType\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxHighlight } from \"./TxHighlight\";\n\nexport class TxHighlightRenderer implements IGridFieldRenderer<ITxLite> {\n    constructor(\n        private translation: ITranslation,\n        private highlight: (f: ITxLite) => boolean\n    ) {\n    }\n\n    render(f: ITxLite) {\n        return (\n            <TxHighlight highlight={this.highlight(f)}>\n                { this.translation.get(\"general.tx.type.\" + TxType[f.type]) }\n            </TxHighlight>\n        );\n    }\n}\n","import { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxType } from \"app/eth-extended/data/tx/TxType\";\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\nimport { AccountLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountLinkRenderer\";\nimport { ITxGridFieldKeys, IHighlightFn } from \"../TxsGrid\";\nimport { TxHighlightRenderer } from \"./TxHighlightRenderer\";\n\nexport class TxGridFields extends GridFields<ITxLite> {\n    constructor(t: ITranslation, locale: string, highlightFn: IHighlightFn) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.grid.header.type.label\"),\n            fieldKey: ITxGridFieldKeys.Type,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => TxType[f.type],\n            renderer: new TxHighlightRenderer(t, highlightFn)\n        }, {\n            label: t.get(\"general.hash\"),\n            fieldKey: ITxGridFieldKeys.Hash,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.hash,\n            renderer: new TxLinkRenderer(f => f.hash)\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ITxGridFieldKeys.From,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountLinkRenderer(f => f.from)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ITxGridFieldKeys.To,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountLinkRenderer(f => f.to)\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ITxGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }, {\n            label: t.get(\"general.feeEth\"),\n            fieldKey: ITxGridFieldKeys.Fee,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\n            renderer: new EthRenderer(\n                locale,\n                f => f.gasUsed.multipliedBy(f.gasPrice)\n            )\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { Grid } from \"app/shared/component/Grid\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\nimport { BigNumber } from \"app/util/BigNumber\";\nimport { TxGridFields } from \"./txsGrid/TxGridFields\";\n\nconst TxsGridRoot = styled.div`\n    margin-top: 16px;\n`;\n\nexport enum ITxGridFieldKeys {\n    Type = \"type\",\n    Hash = \"hash\",\n    From = \"from\",\n    To = \"to\",\n    Value = \"value\",\n    Fee = \"fee\"\n}\n\nexport interface IHighlightFn {\n    (f: ITxLite): boolean;\n}\n\ninterface ITxGridProps {\n    transactions: ITxLite[];\n    locale: string;\n    translation: ITranslation;\n    gridSortingOptions: GridSortingOptions;\n    highlightThreshold: number;\n    highlightDataSelector(t: ITxLite): number | BigNumber;\n}\n\n@observer\nexport class TxsGrid extends React.Component<ITxGridProps> {\n    @observable.ref\n    private gridFields: GridFields<ITxLite>;\n    private gridSortingOptions: GridSortingOptions;\n    private scaledHighlightValues: Map<ITxLite, number>;\n\n    constructor(props: ITxGridProps) {\n        super(props);\n        this.gridFields = new TxGridFields(props.translation, props.locale, this.highlight);\n        this.gridSortingOptions = this.props.gridSortingOptions;\n    }\n\n    @action\n    componentDidUpdate(prevProps: ITxGridProps) {\n        if (this.props.translation !== prevProps.translation) {\n            this.gridFields = new TxGridFields(this.props.translation, this.props.locale, this.highlight);\n        }\n    }\n\n    render() {\n        let highlightValues = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));\n        this.scaledHighlightValues = this.computeScaledHighlightValues(highlightValues);\n\n        const rows = this.props.transactions.map(tx => {\n            return {\n                key: tx.hash,\n                data: tx\n            };\n        });\n        return (\n            <TxsGridRoot>\n                <Grid<ITxLite>\n                    rows={rows}\n                    fields={this.gridFields}\n                    sortingOptions={this.gridSortingOptions}\n                    translation={this.props.translation}\n                />\n            </TxsGridRoot>\n        );\n    }\n\n    private computeScaledHighlightValues(values: (number | BigNumber)[]) {\n        // Creates a map of tx data objects to scaled values. We do this because the link between the data item and\n        // original array index is lost in rendering\n        let scaledHighlightValues = new Map<ITxLite, number>();\n\n        minMaxLogScale(values).forEach((v, i) => {\n            scaledHighlightValues.set(this.props.transactions[i], v);\n        });\n\n        return scaledHighlightValues;\n    }\n\n    private highlight = (data: ITxLite) => {\n        let percentLog = this.scaledHighlightValues.get(data);\n        if (percentLog === void 0) {\n            throw new Error(`Missing scaledHighlightValues for txHash \"${data.hash}\"`);\n        }\n        return percentLog > this.props.highlightThreshold;\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { Spacer } from \"@alethio/ui/lib/layout/Spacer\";\nimport { TxCountBox } from \"@alethio/explorer-ui/lib/box/block/TxCountBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxHighlightSelector } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/TxHighlightSelector\";\nimport { ViewSelectorBox } from \"@alethio/explorer-ui/lib/blockTxs/ViewSelectorBox\";\nimport { BlockTxsStateFactory } from \"../BlockTxsStateFactory\";\nimport { BlockTxsState } from \"../BlockTxsState\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxTooltipContent } from \"./TxTooltipContent\";\nimport { TxsHeatMap } from \"@alethio/explorer-ui/lib/blockTxs/txHeatMap/TxsHeatMap\";\nimport { TxsGrid } from \"./TxsGrid\";\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\n\nconst HIGHLIGHT_THRESHOLD = 80;\n\ninterface IGlobalState {\n    blockTxsState?: BlockTxsState;\n}\n\nexport interface IBlockTxsProps {\n    txs: ITxLite[];\n    latestEthPrice: number | undefined;\n    translation: ITranslation;\n    locale: string;\n    uiStateContainer: IGlobalState;\n}\n\n@observer\nexport class BlockTxs extends React.Component<IBlockTxsProps> {\n    constructor(props: IBlockTxsProps) {\n        super(props);\n\n        // TODO: encapsulation per module type\n        let blockTxsState = this.props.uiStateContainer.blockTxsState;\n        if (!blockTxsState) {\n            blockTxsState = new BlockTxsStateFactory().create();\n            this.props.uiStateContainer.blockTxsState = blockTxsState;\n        }\n    }\n\n    render() {\n        let { translation: tr, txs, locale, uiStateContainer } = this.props;\n        let {\n            txsGridSortingOptions, txsHighlightFields, txsViewMode\n        } = uiStateContainer.blockTxsState as BlockTxsState;\n\n        return <>\n            <LayoutRow minWidth={610}>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\n                    <TxCountBox>{txs.length}</TxCountBox>\n                </LayoutRowItem>\n                { txs.length ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactionsHighlight.label\")}</Label>\n                    <TxHighlightSelector fields={txsHighlightFields} translation={tr} />\n                    <ViewSelectorBox txsViewMode={txsViewMode} />\n                </LayoutRowItem>\n                : null }\n            </LayoutRow>\n            { txs.length ?\n            <>\n                { txsViewMode.isHeatMapGrid ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <div />\n                        <div style={{ maxWidth: 600 }}>\n                            <TxsHeatMap\n                                transactions={txs}\n                                highlightThreshold={HIGHLIGHT_THRESHOLD}\n                                highlightDataSelector={txsHighlightFields.getSelectedField().getData}\n                                scaleValuesFn={minMaxLogScale}\n                                txTooltipThunk={this.renderHeatMapTooltip}\n                            />\n                        </div>\n                    </LayoutRowItem>\n                </LayoutRow>\n                :\n                <TxsGrid\n                    transactions={txs}\n                    highlightThreshold={HIGHLIGHT_THRESHOLD}\n                    highlightDataSelector={txsHighlightFields.getSelectedField().getData}\n                    gridSortingOptions={txsGridSortingOptions}\n                    locale={locale}\n                    translation={tr}\n                />\n                }\n                <Spacer height=\"64px\" />\n            </>\n            : null }\n        </>;\n    }\n\n    private renderHeatMapTooltip = (tx: ITxLite) => {\n        return <TxTooltipContent\n            tx={tx}\n            latestEthPrice={this.props.latestEthPrice}\n            translation={this.props.translation} locale={this.props.locale}\n        />;\n    }\n}\n"],"sourceRoot":""}