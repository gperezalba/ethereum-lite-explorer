{"version":3,"sources":["webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/box/block/BlockHashBox.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/box/block/ParentHashBox.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/data/ByteSize.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/box/block/BlockSizeBox.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/component/box/cm/CmCountBox.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockDetails/component/blockSummary/TooltipTxCount.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockDetails/component/blockSummary/BlockSummaryTooltipText.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockDetails/component/blockSummary/BlockSummary.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/block/blockDetails/component/BlockDetails.tsx"],"names":["BlockHashBox_BlockHashBox","external_react_","[object Object]","children","linkTo","this","props","HashLinkValueBox","colors","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","ByteSize_ByteSize","format","replace","NumberFormatter","locale","BlockSizeBox","bytes","translations","ValueBox","CmCountBox","contractColorCode","cmBoxText","TooltipCountRoot","styled_components","span","withConfig","displayName","componentId","tooltipTxCountText","TooltipTxCount","count","translation","get","BlockSummaryTooltipText_BlockSummaryTooltipText","StackBarTooltipText","bubbleColor","color","label","percent","BlockSummary_$BlockSummary","StackBar","defaultBarHeight","maxBarHeight","minBarHeight","items","buildData","Map","set","TxType","Value","txTypeValue","Create","txTypeCreate","Call","txTypeCall","countPerType","transactions","forEach","tx","type","totalCount","values","reduce","acc","current","dataItems","keys","sort","map","roundedItems","Object","roundPercentages","roundedItem","originalItem","Error","tooltip","BlockSummary","__webpack_require__","d","__webpack_exports__","BlockDetails_BlockDetails","tr","blockDetails","block","slots","LayoutSection","useWrapper","LayoutRow","minWidth","LayoutRowItem","Label","BlockNumberBox","noLink","id","creationTime","TimeElapsedBox","timestamp","BlockDetailsSlotType","Confirmations","UnclesCountBox","uncles","length","inconsistentWarning","TooltipRegular","content","style","width","textAlign","ErrorIcon","hash","parentHash","parentId","fullRow","uncleHash","UncleHashBox","key","HashValueBox","nonce","byteSize","autoHeight","maxWidth","flex","Txs","contractMsgCount","txTrie","sha3uncles","beneficiaryAddress","AddressHashBox","beneficiaryName","Link_","to","MinerLabelBox","mineTime","TimeInPoolBox","seconds","arrow","EthValueBox","wei","beneficiaryReward","NumberBox","value","gasLimit","GasUsedValueBox","gasUsed","limit","DifficultyBox","difficulty","ExtraData","DecodedHexData","data","extraData","mixHash","receiptsTrie","HexData","logsBloom"],"mappings":"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","file":"70d3e7453bf4cec5b654.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { HashLinkValueBox } from \"../HashLinkValueBox\";\r\nimport { ITheme } from \"../../theme/ITheme\";\r\n\r\ninterface IBlockHashBoxProps {\r\n    children: string;\r\n    linkTo?: string;\r\n}\r\n\r\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\r\n    render() {\r\n        let { children, linkTo } = this.props;\r\n        return (\r\n            <HashLinkValueBox\r\n                colors={(theme: ITheme) => ({\r\n                    background: theme.colors.blockColorCode,\r\n                    text: theme.colors.blockBoxText\r\n                })}\r\n                linkTo={linkTo}\r\n            >\r\n                { children }\r\n            </HashLinkValueBox>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"../HashLinkValueBox\";\r\nimport { ITheme } from \"../../theme/ITheme\";\r\n\r\ninterface IParentHashBoxProps {\r\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\r\n    children: string;\r\n}\r\n\r\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo }) => (\r\n    <HashLinkValueBox\r\n        colors={(theme: ITheme) => ({\r\n            background: theme.colors.parentHashBoxBg,\r\n            text: theme.colors.parentHashBoxText\r\n        })}\r\n        linkTo={linkTo}\r\n    >\r\n        { children }\r\n    </HashLinkValueBox>\r\n);\r\n","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\n\r\nexport interface IByteSizeProps {\r\n    children: number;\r\n    locale: string;\r\n    /** Localized string: (e.g. \"%d bytes\") */\r\n    format: string;\r\n}\r\n\r\nexport class ByteSize extends React.Component<IByteSizeProps> {\r\n    render() {\r\n        return (\r\n            this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale))\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\r\nimport { ByteSize } from \"@alethio/ui/lib/data/ByteSize\";\r\n\r\nexport interface IBlockSizeBoxProps {\r\n    bytes: number;\r\n    locale: string;\r\n    translations: {\r\n        bytes: string;\r\n    };\r\n}\r\n\r\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\r\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\r\n);\r\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\n\ninterface ICmCountBoxProps {\n}\n\nexport const CmCountBox: React.StatelessComponent<ICmCountBoxProps> = ({ children }) => (\n    <ValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.contractColorCode,\n            text: theme.colors.cmBoxText\n        })}\n    >\n        { children }\n    </ValueBox>\n);\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\n\ninterface ITooltipTxCountBoxProps {\n    count: number;\n    translation: ITranslation;\n}\n\nconst TooltipCountRoot = styled.span`\n    color: ${props => props.theme.colors.tooltipTxCountText};\n`;\n\nexport const TooltipTxCount: React.StatelessComponent<ITooltipTxCountBoxProps> = ({ count, translation }) => (\n    <TooltipCountRoot>\n        {translation.get(\"blockView.content.blockSummary.txs.label\")\n            .replace(/%d/, \"\" + count)}\n    </TooltipCountRoot>\n);\n","import * as React from \"react\";\nimport { StackBarTooltipText } from \"@alethio/ui/lib/data/vis/stackBar/StackBarTooltipText\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TooltipTxCount } from \"./TooltipTxCount\";\n\nexport interface IBlockSummaryTooltipTextProps {\n    count: number;\n    percent: number;\n    color: string;\n    label: string;\n    translation: ITranslation;\n}\n\nexport class BlockSummaryTooltipText extends React.Component<IBlockSummaryTooltipTextProps> {\n    render() {\n        return (\n            <StackBarTooltipText bubbleColor={this.props.color}>\n                <span>\n                    {this.props.label}\n                </span>\n                <span>\n                    {this.props.percent}%\n                </span>\n                <TooltipTxCount count={this.props.count} translation={this.props.translation} />\n            </StackBarTooltipText>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { StackBar } from \"@alethio/ui/lib/data/vis/stackBar/StackBar\";\nimport { ITxLite } from \"app/eth-extended/data/tx/ITxLite\";\nimport { TxType } from \"app/eth-extended/data/tx/TxType\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\nimport { BlockSummaryTooltipText } from \"./BlockSummaryTooltipText\";\nimport { roundPercentages } from \"app/helper/roundPercentages\";\n\nexport interface IBlockSummaryProps {\n    transactions: ITxLite[];\n    translation: ITranslation;\n    theme?: ITheme;\n}\n\nclass $BlockSummary extends React.PureComponent<IBlockSummaryProps> {\n    render() {\n        return (\n            <StackBar defaultBarHeight={8} maxBarHeight={12} minBarHeight={4} items={this.buildData()} />\n        );\n    }\n\n    private buildData() {\n        const colors = new Map<TxType, string>()\n            .set(TxType.Value, this.props.theme!.colors.txTypeValue)\n            .set(TxType.Create, this.props.theme!.colors.txTypeCreate)\n            .set(TxType.Call, this.props.theme!.colors.txTypeCall);\n\n        let countPerType = new Map<TxType, number>();\n        this.props.transactions.forEach(tx => {\n            countPerType.set(tx.type, (countPerType.get(tx.type) || 0) + 1);\n        });\n        let totalCount = [...countPerType.values()].reduce((acc, current) => acc + current, 0);\n\n        let dataItems = [...countPerType.keys()].sort().map(type => {\n            let count = countPerType.get(type)!;\n            return {\n                type,\n                count,\n                percent: count / totalCount * 100\n            };\n        });\n\n        // Round percentages so that they still add to 100%\n        let roundedItems = roundPercentages(dataItems);\n\n        return roundedItems.map(roundedItem => {\n            let type = roundedItem.originalItem.type;\n            let color = colors.get(type);\n            if (!color) {\n                throw new Error(`TransactionType \"${TxType[type]}\" has no color defined`);\n            }\n            let label = this.props.translation.get(\"general.tx.type.\" + TxType[type]);\n            let count = roundedItem.originalItem.count;\n            let percent = roundedItem.percent;\n\n            return {\n                count,\n                color,\n                label,\n                tooltip:\n                    <BlockSummaryTooltipText\n                        count={count}\n                        color={color}\n                        label={label}\n                        percent={percent}\n                        translation={this.props.translation}\n                    />\n            };\n        });\n    }\n}\n\nexport const BlockSummary = withTheme($BlockSummary);\n","import * as React from \"react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\nimport { NumberBox } from \"@alethio/ui/lib/data/box/NumberBox\";\nimport { GasUsedValueBox } from \"@alethio/ui/lib/data/box/GasUsedValueBox\";\nimport { DifficultyBox } from \"@alethio/ui/lib/data/box/DifficultyBox\";\nimport { DecodedHexData } from \"@alethio/ui/lib/data/hex/DecodedHexData\";\nimport { HexData } from \"@alethio/ui/lib/data/hex/HexData\";\nimport { HashValueBox } from \"@alethio/ui/lib/data/box/HashValueBox\";\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\nimport { ErrorIcon } from \"@alethio/ui/lib/icon/ErrorIcon\";\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\nimport { BlockNumberBox } from \"@alethio/explorer-ui/lib/box/block/BlockNumberBox\";\nimport { TimeElapsedBox } from \"app/shared/component/TimeElapsedBox\";\nimport { BlockHashBox } from \"@alethio/explorer-ui/lib/box/block/BlockHashBox\";\nimport { ParentHashBox } from \"@alethio/explorer-ui/lib/box/block/ParentHashBox\";\nimport { BlockSizeBox } from \"@alethio/explorer-ui/lib/box/block/BlockSizeBox\";\nimport { CmCountBox } from \"app/eth-extended/component/box/cm/CmCountBox\";\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\nimport { MinerLabelBox } from \"@alethio/explorer-ui/lib/box/account/MinerLabelBox\";\nimport { TimeInPoolBox } from \"@alethio/explorer-ui/lib/box/tx/TimeInPoolBox\";\nimport { UncleHashBox } from \"@alethio/explorer-ui/lib/box/uncle/UncleHashBox\";\nimport { UnclesCountBox } from \"@alethio/explorer-ui/lib/box/block/UnclesCountBox\";\nimport { Link } from \"plugin-api/component/Link\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { IBlockDetails } from \"app/eth-extended/data/block/details/IBlockDetails\";\nimport { BlockDetailsSlotType } from \"../BlockDetailsSlotType\";\nimport { BlockSummary } from \"./blockSummary/BlockSummary\";\n\nexport interface IBlockDetailsProps {\n    blockDetails: IBlockDetails;\n    translation: ITranslation;\n    locale: string;\n    slots: Record<BlockDetailsSlotType, JSX.Element[]>;\n}\n\nexport class BlockDetails extends React.PureComponent<IBlockDetailsProps> {\n    render() {\n        let { translation: tr, blockDetails: block, slots, locale } = this.props;\n\n        return <>\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={900}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\n                        <BlockNumberBox noLink>{block.id}</BlockNumberBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        {block.creationTime ?\n                        <>\n                        <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                        <TimeElapsedBox timestamp={block.creationTime}\n                            translation={tr}\n                            locale={locale} />\n                        </>\n                        : null }\n                        { slots[BlockDetailsSlotType.Confirmations] }\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.hash\")}</Label>\n                        { block.inconsistentWarning ?\n                            <TooltipRegular content={\n                                <div style={{width: 450, textAlign: \"center\"}}>\n                                    { tr.get(\"blockView.content.inconsistentWarning.text\") }\n                                </div>\n                            }>\n                                <ErrorIcon />\n                            </TooltipRegular>\n                        : null}\n                        <BlockHashBox>{block.hash}</BlockHashBox>\n                    </LayoutRowItem>\n                    {block.parentHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\n                        <ParentHashBox\n                            linkTo={block.parentId ? `page://aleth.io/block?blockNumber=${block.parentId}` : void 0}\n                        >\n                            {block.parentHash}\n                        </ParentHashBox>\n                    </LayoutRowItem> : null }\n                </LayoutRow>\n                { block.uncles.length ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        {block.uncles.map(uncleHash => (\n                            <UncleHashBox key={uncleHash} linkTo={`page://aleth.io/uncle?uncleHash=${uncleHash}`}>\n                                {uncleHash}\n                            </UncleHashBox>\n                        ))}\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                <LayoutRow minWidth={710}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.nonce\")}</Label>\n                        <HashValueBox>{block.nonce}</HashValueBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\n                        <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\n                            bytes: tr.get(\"general.bytes\")\n                        }} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                { block.transactions.length ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <Label>{tr.get(\"blockView.content.blockSummary.label\")}</Label>\n                        <div style={{maxWidth: 500, flex: \"1 1 auto\"}}>\n                            <BlockSummary transactions={block.transactions} translation={tr}/>\n                        </div>\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            { slots[BlockDetailsSlotType.Txs]}\n            <LayoutSection useWrapper>\n                { block.transactions.length ?\n                <LayoutRow>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.contractMessages.label\")}</Label>\n                        <CmCountBox>{block.contractMsgCount}</CmCountBox>\n                        <ValueBox colors=\"primary\">\n                            {tr.get(\"blockView.content.contractMessages.text\")}</ValueBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                { block.txTrie || block.sha3uncles ?\n                <LayoutRow minWidth={760}>\n                    { block.txTrie ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.txTrie.label\")}</Label>\n                        <HashValueBox>{block.txTrie}</HashValueBox>\n                    </LayoutRowItem>\n                    : [] }\n                    { block.sha3uncles ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\n                        <HashValueBox>{block.sha3uncles}</HashValueBox>\n                    </LayoutRowItem>\n                    : null }\n                </LayoutRow>\n                : null }\n                { block.beneficiaryAddress ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\n                        <AddressHashBox>{block.beneficiaryAddress}</AddressHashBox>\n                        { block.beneficiaryName ?\n                        <Link to={`page://aleth.io/account?accountHash=${block.beneficiaryAddress!}`}>\n                            <MinerLabelBox>{block.beneficiaryName}</MinerLabelBox>\n                        </Link>\n                        : null }\n                        { block.mineTime ?\n                        <TimeInPoolBox seconds={block.mineTime} colors=\"secondary\"\n                            translation={tr.get(\"blockView.content.beneficiary.mineTime\")} />\n                        : null }\n                        <Label arrow>{tr.get(\"blockView.content.beneficiary.reward.label\")}</Label>\n                        <EthValueBox wei={block.beneficiaryReward} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasLimit\")}</Label>\n                        <NumberBox value={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasUsed\")}</Label>\n                        <GasUsedValueBox value={block.gasUsed} limit={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\n                        <DifficultyBox value={block.difficulty} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                { slots && slots[BlockDetailsSlotType.ExtraData] ||\n                <LayoutRow>\n                    <LayoutRowItem autoHeight>\n                        <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                        <DecodedHexData data={block.extraData} />\n                    </LayoutRowItem>\n                </LayoutRow> }\n                { block.mixHash || block.receiptsTrie ?\n                <LayoutRow minWidth={760}>\n                    { block.mixHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\n                        <HashValueBox>{block.mixHash}</HashValueBox>\n                    </LayoutRowItem>\n                    : [] }\n                    { block.receiptsTrie ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.receiptsTrie.label\")}</Label>\n                        <HashValueBox>{block.receiptsTrie}</HashValueBox>\n                    </LayoutRowItem>\n                    : null }\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            <LayoutSection useWrapper>\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <Label>{tr.get(\"blockView.content.logsBloom.label\")}</Label>\n                        <HexData data={block.logsBloom} />\n                    </LayoutRowItem>\n                </LayoutRow>\n            </LayoutSection>\n        </>;\n    }\n}\n"],"sourceRoot":""}