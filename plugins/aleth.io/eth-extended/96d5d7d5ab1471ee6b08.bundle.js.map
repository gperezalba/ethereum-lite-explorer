{"version":3,"sources":["webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/util/react/DelayedRender.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/tx/TxLinkRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/MessageSummaryCountBox.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/MsgCountInIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/MsgCountOutIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/MsgCountPendingIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/pagination/internal/NavButton.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/PaginationPrevIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/PaginationNextIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/pagination/internal/Cursor.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/control/pagination/CursorPagination.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/PaginatedGrid.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/MsgCountOutSmallIcon.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/icon/MsgCountInSmallIcon.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/txsGrid/TransferDirectionRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/TxsPendingGridFields.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/TxsPendingGrid.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/block/BlockLinkRenderer.tsx","webpack://__aleth_io__ethExtended/../node_modules/@alethio/ui/src/data/gridRenderer/DateTimeRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/CmGridFields.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/CmGrid.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/txsGrid/TxTypeRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/txsGrid/TxTypeExtraRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/TxsMinedGridFields.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/TxsMinedGrid.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/pagination/CursorPaginatedView.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/pagination/OffsetPaginatedView.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/AccountSummary.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/summary/component/Summary.tsx"],"names":["DelayedRender","react__WEBPACK_IMPORTED_MODULE_1__","[object Object]","this","visible","renderTimer","setTimeout","props","delay","clearTimeout","children","tslib__WEBPACK_IMPORTED_MODULE_0__","mobx__WEBPACK_IMPORTED_MODULE_2__","mobx_react__WEBPACK_IMPORTED_MODULE_3__","__webpack_require__","d","__webpack_exports__","TxLinkRenderer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_alethio_ui_lib_data_Hash__WEBPACK_IMPORTED_MODULE_1__","_GridLink__WEBPACK_IMPORTED_MODULE_2__","gridFieldDataGetter","f","hash","to","MessageSummaryCountBoxRoot","styled_components","div","withConfig","displayName","componentId","MessageSummaryCountBox_MessageSummaryCountBox","external_react_","icon","ValueBox","data_Number","locale","value","count","MsgCountInIconRoot","lib_styled_components","theme","colors","msgCountInIcon","MsgCountInIcon_MsgCountInIcon","SvgIcon","Object","assign","stroke","strokeWidth","fill","fillRule","transform","MsgCountOutIconRoot","msgCountOutIcon","MsgCountOutIcon_MsgCountOutIcon","MsgCountPendingIconRoot","msgCountPendingIcon","MsgCountPendingIcon_MsgCountPendingIcon","BUTTON_SIZE","ICON_SIZE","BORDER_WIDTH","NavButtonRoot","disabled","paginationBtnBorder","paginationBtnDisabledText","paginationBtnText","paginationBtnBg","paginationBtnHoverText","NavButton_NavButton","onClick","Icon","PaginationPrevIcon_PaginationPrevIcon","points","PaginationNextIcon_PaginationNextIcon","BORDER_SIZE","Cursor","paginationCursorText","CursorPaginationRoot","sidebarBg","StyledSpinner","SpinnerRegular","LoadStatus","CursorPagination_CursorPagination","rangeStart","rangeEnd","totalItems","loadStatus","errorText","isBusy","NotLoaded","onPrevPage","onNextPage","Error","ErrorHint","defaultProps","Loaded","PaginatedGrid_PaginatedGrid","PaginatedGrid","super","handleNextPage","tslib_es6","paginatedView","loadNextPage","e","onPageError","external_mobx_","items","getItems","getPageSize","scrollToGridTop","handlePrevPage","loadPreviousPage","gridContainer","scrollIntoView","behavior","block","inline","prevProps","itemCount","translation","tr","length","rows","map","item","idx","key","data","ref","Grid","limitRows","fields","sortingOptions","get","external_mobx_react_","MsgCountOutSmallIconRoot","MsgCountOutSmallIcon_MsgCountOutSmallIcon","MsgCountInSmallIconRoot","MsgCountInSmallIcon_MsgCountInSmallIcon","TransferDirectionRenderer_ICON_SIZE","DirectionWrapper","TransferDirectionRenderer_TransferDirectionRenderer","accountAddress","directionOut","from","TooltipRegular","content","size","ITxsPendingGridFieldKeys","TxsPendingGridFields_TxsPendingGridFields","GridFields","t","currentAccountAddress","label","fieldKey","Hash","type","isSortable","selected","alwaysVisible","getFieldValue","renderer","From","AccountHashRenderer","Direction","To","Value","EthRenderer","TxsPendingGrid_TxsPendingGrid","gridFields","gridSortingOptions","GridSortingOptions","logger","error","BlockLinkRenderer_BlockLinkRenderer","blockNumber","GridLink","DateTimeRenderer_DateTimeRenderer","DateTime","timestamp","ICmGridFieldKeys","CmGridFields_CmGridFields","contextAccountAddress","Type","CmTypeExtraRenderer","Id","originatorTxHash","txValidationIndex","CmLinkRenderer","Fee","gasUsed","multipliedBy","gasPrice","decimals","GasUsed","NumberRenderer","GasLimit","gasLimit","BlockNo","id","BlockTime","creationTime","Depth","depth","TriggeredBy","CmParentLinkRenderer","CmGrid_CmGrid","TxTypeRenderer_TxTypeRenderer","TxType","IconWrapper","TxTypeExtraRenderer_TxTypeExtraRenderer","txTypeRenderer","style","position","placement","ErrorSmallIcon","render","ITxsMinedGridFieldKeys","TxsMinedGridFields_TxsMinedGridFields","TxsMinedGrid_TxsMinedGrid","CursorPaginatedView_CursorPaginatedView","store","initialCursor","pageSize","getCursor","storage","currentPage","loadItems","currentItems","RangeError","lastItem","newCursor","atCursor","page","fetch","OffsetPaginatedView_OffsetPaginatedView","initialOffset","newOffset","offset","GridRoot","AccordionInAccountMargin","spacing","sidebarWidth","mediaQueries","breakPoints","smallerThanStandardView","PAGINATION_PAGE_SIZE","AccountSummary_AccountSummary","AccountSummary","renderExpander","config","isOpen","onResize","isFullWidth","Expander","open","fullWidth","renderContent","status","arrowPosition","AccordionItemContentStatus","LayoutRow","LayoutRowItem","Label","ThemeContext_","Consumer","AccordionContentFrame","backgroundColor","gridEvenRowBg","borderColor","gridBorder","noBorder","buildItems","account","address","countContractMsgIn","countContractMsgOut","JSON","stringify","txCounts","AccordionVertical","noDataContent","NotAvailableBox","loadingText","onContentError","index","AccordionItem","limit","cmLiteByAccountStore","blockNo","countsBlockNumber","blockMsgValidationIndex","loadFirstPage","pending","txLiteByAccountStore","fetchPending","in","out","fetchMined","shallow","Summary_Summary","accountDetails","isFresh","flex","fullRow"],"mappings":"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","file":"96d5d7d5ab1471ee6b08.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nexport interface IDelayedRenderProps {\r\n    /** Delay in seconds */\r\n    delay: number;\r\n}\r\n\r\n@observer\r\nexport class DelayedRender extends React.Component<IDelayedRenderProps> {\r\n    @observable\r\n    private visible = false;\r\n    private renderTimer: number | undefined;\r\n\r\n    componentDidMount() {\r\n        this.renderTimer = setTimeout(() => {\r\n            this.visible = true;\r\n        }, this.props.delay * 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.renderTimer) {\r\n            clearTimeout(this.renderTimer);\r\n            this.renderTimer = void 0;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.visible ? this.props.children : null;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { Hash } from \"@alethio/ui/lib/data/Hash\";\r\nimport { GridLink } from \"../../GridLink\";\r\n\r\nexport class TxLinkRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private gridFieldDataGetter: (f: T) => string\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        let hash = this.gridFieldDataGetter(f);\r\n        return (\r\n            <GridLink to={`page://aleth.io/tx?txHash=${hash}`} >\r\n                <Hash>{ hash }</Hash>\r\n            </GridLink>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\n\nconst MessageSummaryCountBoxRoot = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\ninterface IMessageSummaryCountBoxProps {\n    icon: React.ReactNode;\n    count: number;\n    locale: string;\n}\n\nexport class MessageSummaryCountBox extends React.PureComponent<IMessageSummaryCountBoxProps> {\n    render() {\n        return (\n            <MessageSummaryCountBoxRoot>\n                { this.props.icon }\n                <ValueBox><Number locale={this.props.locale} value={this.props.count} /></ValueBox>\n            </MessageSummaryCountBoxRoot>\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountInIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountInIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountInIcon};\r\n`;\r\n\r\nexport class MsgCountInIcon extends React.Component<IMsgCountInIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountInIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <path\r\n                            d={\r\n                                \"M19,3 L15,3 C13.9,3 13,3.9 13,5 L13,7.99 L15,7.99 L15,4.98 L19,4.98 L19,19 \" +\r\n                                \"L15,19 L15,15.99 L13,15.99 L13,19 C13,20.1 13.9,21 15,21 L19,21 \" +\r\n                                \"C20.1,21 21,20.1 21,19 L21,5 C21,3.89 20.1,3 19,3 Z M10,15.99 L15,11.99 \" +\r\n                                \"L10,7.99 L10,10.99 L3,10.99 L3,12.99 L10,12.99 L10,15.99 Z\"\r\n                            }\r\n                            fill=\"currentColor\" fillRule=\"nonzero\"\r\n                            transform={\r\n                                \"translate(12.000000, 12.000000) rotate(-270.000000) \" +\r\n                                \"translate(-12.000000, -12.000000) \"\r\n                            }\r\n                        ></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountInIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountOutIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountOutIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountOutIcon};\r\n`;\r\n\r\nexport class MsgCountOutIcon extends React.Component<IMsgCountOutIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountOutIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <path\r\n                            d={\r\n                                \"M5,3 L9,3 C10.1,3 11,3.91 11,5.01 L11,8 L9,8 L9,4.99 L5,4.99 L5,19 L9,19 L9,16 \" +\r\n                                \"L11,16 L11,19.01 C11,20.11 10.1,21 9,21 L5,21 C3.9,21 3,20.11 3,19.01 L3,5.01 \" +\r\n                                \"C3,3.9 3.9,3 5,3 Z M16,16 L21,12 L16,8 L16,11 L9,11 L9,13 L16,13 L16,16 Z\"\r\n                            }\r\n                            fill=\"currentColor\" fillRule=\"nonzero\"\r\n                            transform={\r\n                                \"translate(12.000000, 12.000000) \" +\r\n                                \"rotate(-90.000000) \" +\r\n                                \"translate(-12.000000, -12.000000) \"\r\n                            }\r\n                        ></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountOutIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountPendingIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountPendingIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountPendingIcon};\r\n`;\r\n\r\nexport class MsgCountPendingIcon extends React.Component<IMsgCountPendingIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountPendingIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <path\r\n                            d={\r\n                                \"M12,6 C11.1715729,6 10.5,5.32842712 10.5,4.5 C10.5,3.67157288 11.1715729,3 12,3 \" +\r\n                                \"C12.8284271,3 13.5,3.67157288 13.5,4.5 C13.5,5.32842712 12.8284271,6 12,6 Z \" +\r\n                                \"M17,6  C16.1715729,6 15.5,5.32842712 15.5,4.5 C15.5,3.67157288 16.1715729,3 17,3 \" +\r\n                                \"C17.8284271,3 18.5,3.67157288 18.5,4.5 C18.5,5.32842712 17.8284271,6 17,6 Z \" +\r\n                                \"M7,6 C6.17157288,6 5.5,5.32842712 5.5,4.5 C5.5,3.67157288 6.17157288,3 7,3 \" +\r\n                                \"C7.82842712,3 8.5,3.67157288 8.5,4.5 C8.5,5.32842712 7.82842712,6 7,6 Z \" +\r\n                                \"M3,19 L3,15 C3,13.9 3.91,13 5.01,13 L8,13 L8,15 L4.99,15 L4.99,19 L19,19 L19,15 \" +\r\n                                \"L16,15 L16,13 L19.01,13 C20.11,13 21,13.9 21,15 L21,19 C21,20.1 20.11,21 19.01,21 \" +\r\n                                \"L5.01,21 C3.9,21 3,20.1 3,19 Z\"\r\n                            }\r\n                            fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        ></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountPendingIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"../../../styled-components\";\r\n\r\nconst BUTTON_SIZE = 36;\r\nconst ICON_SIZE = 24;\r\nconst BORDER_WIDTH = 1;\r\n\r\nconst NavButtonRoot = styled<INavButtonProps, \"div\">(\"div\")`\r\n    cursor: ${props => !props.disabled ? \"pointer\" : \"default\"};\r\n    padding: ${(BUTTON_SIZE - ICON_SIZE - 2 * BORDER_WIDTH) / 2}px;\r\n    border-radius: 4px;\r\n    border: ${BORDER_WIDTH}px solid ${props => props.theme.colors.paginationBtnBorder};\r\n    color: ${props => props.disabled ?\r\n        props.theme.colors.paginationBtnDisabledText :\r\n        props.theme.colors.paginationBtnText};\r\n    background-color: ${props => props.theme.colors.paginationBtnBg};\r\n    outline: 0;\r\n\r\n    ${props => !props.disabled ? css`\r\n    &:hover {\r\n        color: ${props.theme.colors.paginationBtnHoverText};\r\n    }\r\n    ` : ``};\r\n`;\r\n\r\ninterface IIconProps {\r\n    size?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface INavButtonProps {\r\n    Icon: React.ComponentClass<IIconProps> | React.StatelessComponent<IIconProps>;\r\n    disabled?: boolean;\r\n    onClick?(): void;\r\n}\r\n\r\n/** @internal */\r\nexport class NavButton extends React.Component<INavButtonProps> {\r\n    render() {\r\n        let { onClick, Icon, disabled } = this.props;\r\n\r\n        return (\r\n            <NavButtonRoot onClick={!disabled ? onClick : void 0} Icon={Icon} disabled={disabled}>\r\n                <Icon />\r\n            </NavButtonRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IPaginationPrevIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class PaginationPrevIcon extends React.Component<IPaginationPrevIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <g transform=\"translate(-6.000000, -6.000000)\" fill=\"currentColor\" fillRule=\"nonzero\">\r\n                        <g\r\n                            // tslint:disable-next-line:max-line-length\r\n                            transform=\"translate(18.000000, 18.000000) rotate(-270.000000) translate(-18.000000, -18.000000) translate(6.000000, 6.000000)\"\r\n                        >\r\n                            <polygon points=\"16.59 8.59 12 13.17 7.41 8.59 6 10 12 16 18 10\"></polygon>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IPaginationNextIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class PaginationNextIcon extends React.Component<IPaginationNextIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <g transform=\"translate(-258.000000, -6.000000)\" fill=\"currentColor\" fillRule=\"nonzero\">\r\n                        <g transform=\"translate(252.000000, 0.000000)\">\r\n                            <g\r\n                                // tslint:disable-next-line:max-line-length\r\n                                transform=\"translate(18.000000, 18.000000) scale(-1, 1) rotate(-270.000000) translate(-18.000000, -18.000000) translate(6.000000, 6.000000)\"\r\n                            >\r\n                                <polygon points=\"16.59 8.59 12 13.17 7.41 8.59 6 10 12 16 18 10\"></polygon>\r\n                            </g>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import styled from \"../../../styled-components\";\r\n\r\nconst BORDER_SIZE = 1;\r\n\r\n/** @internal */\r\nexport const Cursor = styled.div`\r\n    border-radius: 4px;\r\n    border: ${BORDER_SIZE}px solid ${props => props.theme.colors.paginationBtnBorder};\r\n    background-color: ${props => props.theme.colors.paginationBtnBg};\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n    padding: ${10 - BORDER_SIZE}px ${20 - BORDER_SIZE}px ${12 - BORDER_SIZE}px ${20 - BORDER_SIZE}px;\r\n    color: ${props => props.theme.colors.paginationCursorText};\r\n    font-size: 12px;\r\n    line-height: 14px;\r\n    font-weight: 700;\r\n    text-align: center;\r\n    min-width: ${36 - 2 * BORDER_SIZE}px;\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { NavButton } from \"./internal/NavButton\";\r\nimport { PaginationPrevIcon } from \"../../icon/PaginationPrevIcon\";\r\nimport { PaginationNextIcon } from \"../../icon/PaginationNextIcon\";\r\nimport { Number } from \"../../data/Number\";\r\nimport { SpinnerRegular } from \"../../fx/SpinnerRegular\";\r\nimport { DelayedRender } from \"../../util/react/DelayedRender\";\r\nimport { Cursor } from \"./internal/Cursor\";\r\nimport { ErrorHint } from \"../../ErrorHint\";\r\n\r\nconst CursorPaginationRoot = styled.div`\r\n    padding: 24px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: ${props => props.theme.colors.sidebarBg};\r\n\r\n    & > *:not(:first-child) {\r\n        margin-left: 8px;\r\n    }\r\n`;\r\n\r\nconst StyledSpinner = styled(SpinnerRegular)`\r\n    margin-top: 0;\r\n`;\r\n\r\nexport enum LoadStatus {\r\n    NotLoaded,\r\n    Loaded,\r\n    Error\r\n}\r\n\r\nexport interface ICursorPaginationProps {\r\n    rangeStart: number;\r\n    rangeEnd: number;\r\n    totalItems: number;\r\n    locale: string;\r\n    errorText: string;\r\n    loadStatus?: LoadStatus;\r\n    onNextPage(): void;\r\n    onPrevPage(): void;\r\n}\r\n\r\nexport class CursorPagination extends React.Component<ICursorPaginationProps> {\r\n    static defaultProps = {\r\n        loadStatus: LoadStatus.Loaded\r\n    };\r\n\r\n    render() {\r\n        let { rangeStart, rangeEnd, totalItems, loadStatus, errorText, locale} = this.props;\r\n        let isBusy = loadStatus === LoadStatus.NotLoaded;\r\n\r\n        return (\r\n            <CursorPaginationRoot>\r\n                <NavButton\r\n                    Icon={PaginationPrevIcon}\r\n                    disabled={rangeStart === 1 || isBusy}\r\n                    onClick={() => this.props.onPrevPage()} />\r\n                <Cursor>\r\n                    <Number value={rangeStart} locale={locale} />-<Number value={rangeEnd} locale={locale} />\r\n                    {` / `}\r\n                    <Number value={totalItems} locale={locale} />\r\n                </Cursor>\r\n                <NavButton\r\n                    Icon={PaginationNextIcon}\r\n                    disabled={rangeEnd === totalItems || isBusy}\r\n                    onClick={() => this.props.onNextPage()}\r\n                />\r\n                { isBusy ?\r\n                <DelayedRender delay={1}>\r\n                    <StyledSpinner />\r\n                </DelayedRender>\r\n                : loadStatus === LoadStatus.Error ?\r\n                <ErrorHint>{errorText}</ErrorHint>\r\n                : null }\r\n            </CursorPaginationRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { observer } from \"mobx-react\";\nimport { observable, runInAction } from \"mobx\";\nimport { CursorPagination, LoadStatus } from \"@alethio/ui/lib/control/pagination/CursorPagination\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { IGridSortingOptions } from \"@alethio/ui/lib/control/grid/state/IGridSortingOptions\";\nimport { Grid } from \"app/shared/component/Grid\";\nimport { IPaginatedView } from \"app/eth-extended/module/account/summary/pagination/IPaginatedView\";\n\nexport interface IPaginatedGridProps<TItem> {\n    fields: GridFields<TItem>;\n    sortingOptions: IGridSortingOptions;\n    itemCount: number;\n    paginatedView: IPaginatedView<TItem>;\n    translation: ITranslation;\n    locale: string;\n    onPageError(e: any): void;\n}\n\n@observer\nexport class PaginatedGrid<TItem> extends React.Component<IPaginatedGridProps<TItem>> {\n    private gridContainer: HTMLElement;\n    @observable\n    private rangeStart = 1;\n    @observable\n    private loadStatus = LoadStatus.Loaded;\n    private items: TItem[];\n\n    constructor(props: IPaginatedGridProps<TItem>) {\n        super(props);\n\n        this.items = this.props.paginatedView.getItems();\n    }\n\n    componentDidUpdate(prevProps: IPaginatedGridProps<TItem>) {\n        if (this.props.paginatedView !== prevProps.paginatedView) {\n            this.items = this.props.paginatedView.getItems();\n        }\n    }\n\n    render() {\n        let { itemCount, translation: tr, locale } = this.props;\n\n        let rangeEnd = this.rangeStart + this.items.length - 1;\n\n        let rows = this.items.map((item, idx) => ({\n            key: idx,\n            data: item\n        }));\n\n        return <>\n            <div ref={ref => this.gridContainer = ref!}>\n                <Grid<TItem>\n                    rows={rows}\n                    limitRows={false}\n                    fields={this.props.fields}\n                    sortingOptions={this.props.sortingOptions}\n                    translation={tr}\n                />\n            </div>\n            { rangeEnd < itemCount || this.rangeStart > 1 ?\n            <CursorPagination\n                rangeStart={this.rangeStart}\n                rangeEnd={rangeEnd}\n                totalItems={itemCount}\n                loadStatus={this.loadStatus}\n                onPrevPage={this.handlePrevPage}\n                onNextPage={this.handleNextPage}\n                errorText={tr.get(\"general.error\")}\n                locale={locale}\n            />\n            : null }\n        </>;\n    }\n\n    private handleNextPage = async () => {\n        this.loadStatus = LoadStatus.NotLoaded;\n        try {\n            await this.props.paginatedView.loadNextPage();\n        } catch (e) {\n            this.props.onPageError(e);\n            this.loadStatus = LoadStatus.Error;\n            return;\n        }\n        runInAction(() => {\n            this.items = this.props.paginatedView.getItems();\n            this.loadStatus = LoadStatus.Loaded;\n            this.rangeStart += this.props.paginatedView.getPageSize();\n        });\n        this.scrollToGridTop();\n    }\n\n    private handlePrevPage = async () => {\n        this.loadStatus = LoadStatus.NotLoaded;\n        try {\n            await this.props.paginatedView.loadPreviousPage();\n        } catch (e) {\n            this.props.onPageError(e);\n            this.loadStatus = LoadStatus.Error;\n            return;\n        }\n        runInAction(() => {\n            this.items = this.props.paginatedView.getItems();\n            this.loadStatus = LoadStatus.Loaded;\n            this.rangeStart -= this.props.paginatedView.getPageSize();\n        });\n        this.scrollToGridTop();\n    }\n\n    private scrollToGridTop = () => {\n        this.gridContainer.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\",\n            inline: \"nearest\"\n        });\n    }\n}\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountOutSmallIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountOutSmallIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountOutIcon};\r\n`;\r\n\r\nexport class MsgCountOutSmallIcon extends React.Component<IMsgCountOutSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountOutSmallIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                        <path d={\r\n                            // tslint:disable-next-line:max-line-length\r\n                            \"M8,6 L10,6 C11.1,6 12,6.91 12,8.01 L8,7.99 L8,16 L12,16.01 C12,17.11 11.1,18 10,18 L8,18 C6.9,18 6,17.11 6,16.01 L6,8.01 C6,6.9 6.9,6 8,6 Z M13,16 L18,12 L13,8 L13,11 L10,11 L10,13 L13,13 L13,16 Z\"\r\n                        } fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        transform={\r\n                            \"translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000) \"\r\n                        }></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountOutSmallIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountInSmallIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountInSmallIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountInIcon};\r\n`;\r\n\r\nexport class MsgCountInSmallIcon extends React.Component<IMsgCountInSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountInSmallIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                        <path d={\r\n                            // tslint:disable-next-line:max-line-length\r\n                            \"M16,6 L14,6 C12.9,6 12,6.9 12,8 L16,7.98 L16,16 L12,16 C12,17.1 12.9,18 14,18 L16,18 C17.1,18 18,17.1 18,16 L18,8 C18,6.89 17.1,6 16,6 Z M10,15.99 L15,11.99 L10,7.99 L10,10.99 L6,10.99 L6,12.99 L10,12.99 L10,15.99 Z\"\r\n                        } fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        transform={\r\n                            \"translate(12.000000, 12.000000) rotate(-270.000000) translate(-12.000000, -12.000000) \"\r\n                        }></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountInSmallIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { MsgCountOutSmallIcon } from \"@alethio/ui/lib/icon/MsgCountOutSmallIcon\";\nimport { MsgCountInSmallIcon } from \"@alethio/ui/lib/icon/MsgCountInSmallIcon\";\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\n\nlet ICON_SIZE = 24;\n\n// TODO: make grid cell padding configurable to avoid this hack\nconst DirectionWrapper = styled.div`\n    position: relative;\n    margin-top: -2px;\n\n    > * {\n        position: absolute;\n        top: 0;\n        left: 0;\n        transform: translate(-50%, -50%);\n    }\n`;\n\ninterface IFromTo {\n    from: string;\n    to: string;\n}\n\nexport class TransferDirectionRenderer implements IGridFieldRenderer<IFromTo> {\n    constructor(private accountAddress: string, private tr: ITranslation) {\n    }\n\n    render(f: IFromTo) {\n        let directionOut = f.from === this.accountAddress;\n\n        return <DirectionWrapper>\n            { directionOut ?\n                <TooltipRegular\n                    content={this.tr.get(\"accountView.content.transferDirection.outgoing.tooltip\")}\n                >\n                    <MsgCountOutSmallIcon size={ICON_SIZE}/>\n                </TooltipRegular>\n                 :\n                <TooltipRegular\n                    content={this.tr.get(\"accountView.content.transferDirection.incoming.tooltip\")}\n                >\n                    <MsgCountInSmallIcon size={ICON_SIZE} />\n                </TooltipRegular>\n            }\n        </DirectionWrapper>;\n    }\n}\n","import { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\nimport { AccountHashRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountHashRenderer\";\nimport { TransferDirectionRenderer } from \"./txsGrid/TransferDirectionRenderer\";\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\nimport { ITxLiteByAccountPending } from \"../../../../data/tx/lite/byAccount/pending/ITxLiteByAccountPending\";\n\nenum ITxsPendingGridFieldKeys {\n    Hash = \"hash\",\n    From = \"from\",\n    Direction = \"direction\",\n    To = \"to\",\n    Value = \"value\"\n}\n\nexport class TxsPendingGridFields extends GridFields<ITxLiteByAccountPending> {\n    constructor(t: ITranslation, locale: string, currentAccountAddress: string) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.hash\"),\n            fieldKey: ITxsPendingGridFieldKeys.Hash,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.hash,\n            renderer: new TxLinkRenderer(f => f.hash)\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ITxsPendingGridFieldKeys.From,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountHashRenderer(\n                currentAccountAddress,\n                f => f.from\n            )\n        }, {\n            label: \"\",\n            fieldKey: ITxsPendingGridFieldKeys.Direction,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => \"\",\n            renderer: new TransferDirectionRenderer(currentAccountAddress, t)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ITxsPendingGridFieldKeys.To,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountHashRenderer(\n                currentAccountAddress,\n                f => f.to\n            )\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ITxsPendingGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { OffsetPaginatedView } from \"app/eth-extended/module/account/summary/pagination/OffsetPaginatedView\";\nimport { PaginatedGrid } from \"app/eth-extended/module/account/summary/component/PaginatedGrid\";\nimport { TxsPendingGridFields } from \"./TxsPendingGridFields\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport { ITxLiteByAccountPending } from \"app/eth-extended/data/tx/lite/byAccount/pending/ITxLiteByAccountPending\";\n\nexport interface ITxsPendingGridProps {\n    accountAddress: string;\n    paginatedView: OffsetPaginatedView<ITxLiteByAccountPending>;\n    itemCount: number;\n    translation: ITranslation;\n    locale: string;\n    logger: ILogger;\n}\n\nexport class TxsPendingGrid extends React.Component<ITxsPendingGridProps> {\n    private gridFields: GridFields<ITxLiteByAccountPending>;\n    private gridSortingOptions: GridSortingOptions;\n    constructor(props: ITxsPendingGridProps) {\n        super(props);\n        this.gridFields = new TxsPendingGridFields(props.translation, props.locale, props.accountAddress);\n        this.gridSortingOptions = new GridSortingOptions();\n    }\n    render() {\n        return (\n            <PaginatedGrid<ITxLiteByAccountPending>\n                paginatedView={this.props.paginatedView}\n                itemCount={this.props.itemCount}\n                fields={this.gridFields}\n                sortingOptions={this.gridSortingOptions}\n                translation={this.props.translation}\n                locale={this.props.locale}\n                onPageError={e => this.props.logger.error(e)}\n            />\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { Number } from \"@alethio/ui/lib/data/Number\";\r\nimport { GridLink } from \"../../GridLink\";\r\n\r\nexport class BlockLinkRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private locale: string,\r\n        private gridFieldDataGetter: (f: T) => number\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        let blockNumber = this.gridFieldDataGetter(f);\r\n        return (\r\n            <GridLink to={`page://aleth.io/block?blockNumber=${blockNumber}`}>\r\n                <Number locale={this.locale} value={blockNumber} />\r\n            </GridLink>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"../../control/grid/state/IGridFieldRenderer\";\r\nimport { DateTime } from \"../DateTime\";\r\n\r\nexport class DateTimeRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private locale: string,\r\n        private gridFieldDataGetter: (f: T) => number\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        return (\r\n            <DateTime timestamp={this.gridFieldDataGetter(f)} locale={this.locale} />\r\n        );\r\n    }\r\n}\r\n","import { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { ICmLite } from \"app/eth-extended/data/contractMsg/lite/ICmLite\";\nimport { CmTypeExtraRenderer } from \"app/eth-extended/component/grid/cm/CmTypeExtraRenderer\";\nimport { NumberRenderer } from \"@alethio/ui/lib/data/gridRenderer/NumberRenderer\";\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\nimport { CmLinkRenderer } from \"app/eth-extended/component/grid/cm/CmLinkRenderer\";\nimport { TransferDirectionRenderer } from \"./txsGrid/TransferDirectionRenderer\";\nimport { AccountHashRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountHashRenderer\";\nimport { BlockLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/block/BlockLinkRenderer\";\nimport { DateTimeRenderer } from \"@alethio/ui/lib/data/gridRenderer/DateTimeRenderer\";\nimport { CmParentLinkRenderer } from \"app/eth-extended/component/grid/cm/CmParentLinkRenderer\";\n\nenum ICmGridFieldKeys {\n    Type = \"type\",\n    Id = \"id\",\n    From = \"from\",\n    Direction = \"direction\",\n    To = \"to\",\n    Value = \"value\",\n    Fee = \"fee\",\n    GasUsed = \"gasUsed\",\n    GasLimit = \"gasLimit\",\n    BlockNo = \"blockNumber\",\n    BlockTime = \"blockTime\",\n    Depth = \"depth\",\n    TriggeredBy = \"triggeredBy\"\n}\n\nexport class CmGridFields extends GridFields<ICmLite> {\n    constructor(t: ITranslation, locale: string, contextAccountAddress: string) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.grid.header.type.label\"),\n            fieldKey: ICmGridFieldKeys.Type,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.type,\n            renderer: new CmTypeExtraRenderer(t)\n        }, {\n            label: t.get(\"cmView.content.id.label\"),\n            fieldKey: ICmGridFieldKeys.Id,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.originatorTxHash + \"_\" + f.txValidationIndex,\n            renderer: new CmLinkRenderer()\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ICmGridFieldKeys.From,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountHashRenderer(\n                contextAccountAddress,\n                f => f.from\n            )\n        }, {\n            label: \"\",\n            fieldKey: ICmGridFieldKeys.Direction,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => \"\",\n            renderer: new TransferDirectionRenderer(contextAccountAddress, t)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ICmGridFieldKeys.To,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountHashRenderer(\n                contextAccountAddress,\n                f => f.to\n            )\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ICmGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }, {\n            label: t.get(\"general.feeEth\"),\n            fieldKey: ICmGridFieldKeys.Fee,\n            type: \"number\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\n            renderer: new EthRenderer(\n                locale,\n                f => f.gasUsed.multipliedBy(f.gasPrice),\n                { decimals: 9 }\n            )\n        }, {\n            label: t.get(\"general.gasUsed\"),\n            fieldKey: ICmGridFieldKeys.GasUsed,\n            type: \"number\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => f.gasUsed,\n            renderer: new NumberRenderer(\n                locale,\n                f => f.gasUsed\n            )\n        }, {\n            label: t.get(\"general.gasLimit\"),\n            fieldKey: ICmGridFieldKeys.GasLimit,\n            type: \"number\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => f.gasLimit,\n            renderer: new NumberRenderer(\n                locale,\n                f => f.gasLimit\n            )\n        }, {\n            label: t.get(\"accountView.content.accountSummary.transactions.blockNumber.label\"),\n            fieldKey: ICmGridFieldKeys.BlockNo,\n            type: \"number\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => f.block.id,\n            renderer: new BlockLinkRenderer(\n                locale,\n                f => f.block.id\n            )\n        }, {\n            label: t.get(\"accountView.content.accountSummary.transactions.blockTime.label\"),\n            fieldKey: ICmGridFieldKeys.BlockTime,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.block.creationTime,\n            renderer: new DateTimeRenderer(\n                locale,\n                f => f.block.creationTime\n            )\n        }, {\n            label: t.get(\"cmView.content.depth.label\"),\n            fieldKey: ICmGridFieldKeys.Depth,\n            type: \"number\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => f.depth,\n            renderer: new NumberRenderer(\n                locale,\n                f => f.depth\n            )\n        }, {\n            label: t.get(\"cmView.content.triggeredBy.label\"),\n            fieldKey: ICmGridFieldKeys.TriggeredBy,\n            type: \"string\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => \"\",\n            renderer: new CmParentLinkRenderer()\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { ICmLite } from \"app/eth-extended/data/contractMsg/lite/ICmLite\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { CmGridFields } from \"app/eth-extended/module/account/summary/component/CmGridFields\";\nimport { PaginatedGrid } from \"app/eth-extended/module/account/summary/component/PaginatedGrid\";\nimport { ICursor } from \"app/eth-extended/data/contractMsg/lite/byAccount/ICursor\";\nimport { CursorPaginatedView } from \"app/eth-extended/module/account/summary/pagination/CursorPaginatedView\";\nimport { ILogger } from \"plugin-api/ILogger\";\n\nexport interface ICmGridProps {\n    paginatedView: CursorPaginatedView<ICmLite, ICursor>;\n    accountAddress: string;\n    itemCount: number;\n    translation: ITranslation;\n    locale: string;\n    logger: ILogger;\n}\n\nexport class CmGrid extends React.Component<ICmGridProps> {\n    private gridFields: GridFields<ICmLite>;\n    private gridSortingOptions: GridSortingOptions;\n    constructor(props: ICmGridProps) {\n        super(props);\n        this.gridFields = new CmGridFields(props.translation, props.locale, props.accountAddress);\n        this.gridSortingOptions = new GridSortingOptions();\n    }\n    render() {\n        return (\n            <PaginatedGrid<ICmLite>\n                paginatedView={this.props.paginatedView}\n                itemCount={this.props.itemCount}\n                fields={this.gridFields}\n                sortingOptions={this.gridSortingOptions}\n                translation={this.props.translation}\n                locale={this.props.locale}\n                onPageError={e => this.props.logger.error(e)}\n            />\n        );\n    }\n}\n","import { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxLiteByAccountMined } from \"app/eth-extended/data/tx/lite/byAccount/mined/ITxLiteByAccountMined\";\nimport { TxType } from \"app/eth-extended/data/tx/TxType\";\n\nexport class TxTypeRenderer implements IGridFieldRenderer<ITxLiteByAccountMined> {\n    constructor(\n        private translation: ITranslation\n    ) {\n    }\n\n    render(f: ITxLiteByAccountMined) {\n        return this.translation.get(\n            \"general.tx.type.\" + TxType[f.type]\n        );\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxLiteByAccountMined } from \"app/eth-extended/data/tx/lite/byAccount/mined/ITxLiteByAccountMined\";\nimport { TxTypeRenderer } from \"app/eth-extended/module/account/summary/component/txsGrid/TxTypeRenderer\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\nimport { ErrorSmallIcon } from \"@alethio/ui/lib/icon/ErrorSmallIcon\";\n\nconst IconWrapper = styled.div`\n    position: absolute;\n    left: -8px;\n    top: -4px;\n    transform: translateX(-100%);\n`;\n\nexport class TxTypeExtraRenderer implements IGridFieldRenderer<ITxLiteByAccountMined> {\n    private txTypeRenderer: TxTypeRenderer;\n\n    constructor(\n        private translation: ITranslation\n    ) {\n        this.txTypeRenderer = new TxTypeRenderer(translation);\n    }\n\n    render(f: ITxLiteByAccountMined) {\n        return <div style={{ position: \"relative\" }}>\n            { f.error ?\n            <IconWrapper>\n                <TooltipRegular placement=\"left\" content={\n                    typeof f.error === \"string\" ?\n                        f.error :\n                        this.translation.get(\"txView.content.txStatus.error\")\n                }>\n                    <ErrorSmallIcon size={24} />\n                </TooltipRegular>\n            </IconWrapper>\n            : null }\n            {this.txTypeRenderer.render(f)}\n        </div>;\n    }\n}\n","import { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\nimport { AccountHashRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountHashRenderer\";\nimport { BlockLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/block/BlockLinkRenderer\";\nimport { DateTimeRenderer } from \"@alethio/ui/lib/data/gridRenderer/DateTimeRenderer\";\nimport { TxTypeExtraRenderer } from \"./txsGrid/TxTypeExtraRenderer\";\nimport { TransferDirectionRenderer } from \"./txsGrid/TransferDirectionRenderer\";\nimport { ITxLiteByAccountMined } from \"app/eth-extended/data/tx/lite/byAccount/mined/ITxLiteByAccountMined\";\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\n\nenum ITxsMinedGridFieldKeys {\n    Type = \"type\",\n    Hash = \"hash\",\n    From = \"from\",\n    Direction = \"direction\",\n    To = \"to\",\n    Value = \"value\",\n    Fee = \"fee\",\n    BlockNo = \"blockNumber\",\n    BlockTime = \"blockTime\"\n}\n\nexport class TxsMinedGridFields extends GridFields<ITxLiteByAccountMined> {\n    constructor(t: ITranslation, locale: string, currentAccountAddress: string) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.grid.header.type.label\"),\n            fieldKey: ITxsMinedGridFieldKeys.Type,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.type,\n            renderer: new TxTypeExtraRenderer(t)\n        }, {\n            label: t.get(\"general.hash\"),\n            fieldKey: ITxsMinedGridFieldKeys.Hash,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.hash,\n            renderer: new TxLinkRenderer(f => f.hash)\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ITxsMinedGridFieldKeys.From,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountHashRenderer(\n                currentAccountAddress,\n                f => f.from\n            )\n        }, {\n            label: \"\",\n            fieldKey: ITxsMinedGridFieldKeys.Direction,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => \"\",\n            renderer: new TransferDirectionRenderer(currentAccountAddress, t)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ITxsMinedGridFieldKeys.To,\n            type: \"string\",\n            isSortable: false,\n            alwaysVisible: true,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountHashRenderer(\n                currentAccountAddress,\n                f => f.to\n            )\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ITxsMinedGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }, {\n            label: t.get(\"general.feeEth\"),\n            fieldKey: ITxsMinedGridFieldKeys.Fee,\n            type: \"number\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\n            renderer: new EthRenderer(\n                locale,\n                f => f.gasUsed.multipliedBy(f.gasPrice)\n            )\n        }, {\n            label: t.get(\"accountView.content.accountSummary.transactions.blockNumber.label\"),\n            fieldKey: ITxsMinedGridFieldKeys.BlockNo,\n            type: \"number\",\n            isSortable: false,\n            selected: false,\n            getFieldValue: f => f.block.id,\n            renderer: new BlockLinkRenderer(\n                locale,\n                f => f.block.id\n            )\n        },\n        {\n            label: t.get(\"accountView.content.accountSummary.transactions.blockTime.label\"),\n            fieldKey: ITxsMinedGridFieldKeys.BlockTime,\n            type: \"string\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.block.creationTime,\n            renderer: new DateTimeRenderer(\n                locale,\n                f => f.block.creationTime\n            )\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { ITxLiteByAccountMined } from \"app/eth-extended/data/tx/lite/byAccount/mined/ITxLiteByAccountMined\";\nimport { TxsMinedGridFields } from \"app/eth-extended/module/account/summary/component/TxsMinedGridFields\";\nimport { ICursor } from \"app/eth-extended/data/contractMsg/lite/byAccount/ICursor\";\nimport { CursorPaginatedView } from \"app/eth-extended/module/account/summary/pagination/CursorPaginatedView\";\nimport { PaginatedGrid } from \"app/eth-extended/module/account/summary/component/PaginatedGrid\";\nimport { ILogger } from \"plugin-api/ILogger\";\n\nexport interface ITxsMinedGridProps {\n    paginatedView: CursorPaginatedView<ITxLiteByAccountMined, ICursor | undefined>;\n    accountAddress: string;\n    itemCount: number;\n    translation: ITranslation;\n    locale: string;\n    logger: ILogger;\n}\n\nexport class TxsMinedGrid extends React.Component<ITxsMinedGridProps> {\n    private gridFields: GridFields<ITxLiteByAccountMined>;\n    private gridSortingOptions: GridSortingOptions;\n    constructor(props: ITxsMinedGridProps) {\n        super(props);\n        this.gridFields = new TxsMinedGridFields(props.translation, props.locale, props.accountAddress);\n        this.gridSortingOptions = new GridSortingOptions();\n    }\n    render() {\n        return (\n            <PaginatedGrid<ITxLiteByAccountMined>\n                paginatedView={this.props.paginatedView}\n                itemCount={this.props.itemCount}\n                fields={this.gridFields}\n                sortingOptions={this.gridSortingOptions}\n                translation={this.props.translation}\n                locale={this.props.locale}\n                onPageError={e => this.props.logger.error(e)}\n            />\n        );\n    }\n}\n","import { IPaginatedView } from \"app/eth-extended/module/account/summary/pagination/IPaginatedView\";\n\ninterface IStore<TItem, TCursor> {\n    fetch(cursor: TCursor, limit: number): Promise<TItem[]>;\n}\n\n/**\n * Loads data using a cursor-based pagination and keeps all records in memory to be able to navigate backwards without\n * having another server call with a \"reverse\" cursor.\n */\nexport class CursorPaginatedView<TItem, TCursor> implements IPaginatedView<TItem> {\n    /**\n     * Items indexed by page number.\n     *\n     * We use page numbers so that we can navigate backwards without having a \"previous\" cursor.\n     */\n    private storage: TItem[][] = [];\n    private currentPage: number | undefined;\n\n    constructor(\n        private store: IStore<TItem, TCursor>,\n        private initialCursor: TCursor,\n        private pageSize: number,\n        private getCursor: (item: TItem) => TCursor\n    ) {\n    }\n\n    async loadFirstPage() {\n        this.currentPage = 0;\n        await this.loadItems(this.initialCursor, this.currentPage);\n    }\n\n    async loadNextPage() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        let currentItems = this.getItems();\n        // We have no \"next URL\" in server response, so we only know it's the last page when there are fewer items\n        if (currentItems.length < this.pageSize) {\n            throw new RangeError(`We are already on the last page`);\n        }\n        let lastItem = currentItems[currentItems.length - 1];\n        let newCursor = this.getCursor(lastItem);\n        this.currentPage++;\n        await this.loadItems(newCursor, this.currentPage);\n    }\n\n    async loadPreviousPage() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        if (this.currentPage === 0) {\n            throw new RangeError(`We are already on the first page`);\n        }\n        this.currentPage--;\n    }\n\n    private async loadItems(atCursor: TCursor, page: number) {\n        let items = this.storage[page];\n        if (!items) {\n            items = await this.store.fetch(atCursor, this.pageSize);\n            this.storage[page] = items;\n        }\n    }\n\n    getItems() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        return this.storage[this.currentPage];\n    }\n\n    getPageSize() {\n        return this.pageSize;\n    }\n}\n","import { IPaginatedView } from \"app/eth-extended/module/account/summary/pagination/IPaginatedView\";\n\ninterface IStore<TItem> {\n    fetch(offset: number, limit: number): Promise<TItem[]>;\n}\n\n/**\n * Loads data using an offset-based pagination. Always fetches fresh data on page change\n */\nexport class OffsetPaginatedView<TItem> implements IPaginatedView<TItem> {\n    private storage: TItem[] = [];\n    private currentPage: number | undefined;\n\n    constructor(\n        private store: IStore<TItem>,\n        private initialOffset: number,\n        private pageSize: number\n    ) {\n    }\n\n    async loadFirstPage() {\n        this.currentPage = 0;\n        await this.loadItems(this.initialOffset);\n    }\n\n    async loadNextPage() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        let currentItems = this.getItems();\n        // We have no \"next URL\" in server response, so we only know it's the last page when there are fewer items\n        if (currentItems.length < this.pageSize) {\n            throw new RangeError(`We are already on the last page`);\n        }\n        this.currentPage++;\n        let newOffset = this.pageSize * this.currentPage;\n        await this.loadItems(newOffset);\n    }\n\n    async loadPreviousPage() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        if (this.currentPage === 0) {\n            throw new RangeError(`We are already on the first page`);\n        }\n        this.currentPage--;\n        let newOffset = this.pageSize * this.currentPage;\n        await this.loadItems(newOffset);\n    }\n\n    private async loadItems(offset: number) {\n        let items = await this.store.fetch(offset, this.pageSize);\n        this.storage = items;\n    }\n\n    getItems() {\n        if (this.currentPage === void 0) {\n            throw new Error(`Not initialized`);\n        }\n        return this.storage;\n    }\n\n    getPageSize() {\n        return this.pageSize;\n    }\n}\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { NotAvailableBox } from \"app/shared/component/NotAvailableBox\";\nimport { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\nimport { Expander } from \"@alethio/ui/lib/control/expander/Expander\";\nimport { observable } from \"mobx\";\nimport { observer, Observer } from \"mobx-react\";\nimport { AccordionVertical, IAccordionVerticalProps } from \"@alethio/ui/lib/control/accordion/AccordionVertical\";\nimport { AccordionItem } from \"@alethio/ui/lib/control/accordion/AccordionItem\";\nimport { AccordionContentFrame } from \"@alethio/ui/lib/control/accordion/AccordionContentFrame\";\nimport { ThemeContext } from \"plugin-api/ThemeContext\";\nimport { AccordionItemContentStatus } from \"@alethio/ui/lib/control/accordion/AccordionItemContentStatus\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { IAccountDetails } from \"app/eth-extended/data/account/details/IAccountDetails\";\nimport { TxLiteByAccountStore } from \"app/eth-extended/data/tx/lite/byAccount/TxLiteByAccountStore\";\nimport { TxsPendingGrid } from \"app/eth-extended/module/account/summary/component/TxsPendingGrid\";\nimport { CmGrid } from \"app/eth-extended/module/account/summary/component/CmGrid\";\nimport { TxsMinedGrid } from \"app/eth-extended/module/account/summary/component/TxsMinedGrid\";\nimport { ITxLiteByAccountMined } from \"app/eth-extended/data/tx/lite/byAccount/mined/ITxLiteByAccountMined\";\nimport { ICursor } from \"app/eth-extended/data/contractMsg/lite/byAccount/ICursor\";\nimport { CursorPaginatedView } from \"app/eth-extended/module/account/summary/pagination/CursorPaginatedView\";\nimport { OffsetPaginatedView } from \"app/eth-extended/module/account/summary/pagination/OffsetPaginatedView\";\nimport { ICmLiteByAccount } from \"app/eth-extended/data/contractMsg/lite/byAccount/ICmLiteByAccount\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { CmLiteByAccountStore } from \"app/eth-extended/data/contractMsg/lite/byAccount/CmLiteByAccountStore\";\nimport { ITxCounts } from \"app/eth-extended/module/account/summary/ITxCounts\";\n\nconst GridRoot = styled.div`\n    max-width: 100vw;\n`;\n\nconst AccordionInAccountMargin = styled.div`\n    margin-left: -${props => props.theme.spacing.sidebarWidth}px;\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanStandardView} {\n        margin-left: 0px;\n    }\n`;\n\nconst PAGINATION_PAGE_SIZE = 50;\n\ninterface IAccountSummaryItemConfig extends IAccordionItemConfig {\n    label: string;\n    value(): number;\n}\n\nexport interface IAccountSummaryProps {\n    account: IAccountDetails;\n    translation: ITranslation;\n    locale: string;\n    logger: ILogger;\n    cmLiteByAccountStore: CmLiteByAccountStore;\n    txLiteByAccountStore: TxLiteByAccountStore;\n    txCounts: ITxCounts | undefined;\n}\n\n@observer\nexport class AccountSummary extends React.Component<IAccountSummaryProps> {\n    @observable.shallow\n    private items: React.ReactNode;\n\n    constructor(props: IAccountSummaryProps) {\n        super(props);\n\n        this.items = this.buildItems(this.props.account);\n    }\n\n    componentDidUpdate(prevProps: IAccountSummaryProps) {\n        if (this.props.account.address !== prevProps.account.address ||\n            this.props.account.countContractMsgIn !== prevProps.account.countContractMsgIn ||\n            this.props.account.countContractMsgOut !== prevProps.account.countContractMsgOut ||\n            JSON.stringify(this.props.txCounts) !== JSON.stringify(prevProps.txCounts) ||\n            this.props.translation !== prevProps.translation\n        ) {\n            this.items = this.buildItems(this.props.account);\n        }\n    }\n\n    render() {\n        const { translation: tr } = this.props;\n\n        return <AccordionVertical\n            label={tr.get(\"accountView.content.accountSummary.label\")}\n            noDataContent={<NotAvailableBox translation={tr} />}\n            renderExpander={this.renderExpander}\n            renderContent={this.renderContent}\n            loadingText={`${tr.get(\"general.loading\")}...`}\n            errorText={tr.get(\"general.error\")}\n            onContentError={(e, item) => {\n                this.props.logger.error(`Couldn't load content for account summary tab #${item.index}`, e);\n            }}\n        >\n            {this.items}\n        </AccordionVertical>;\n    }\n\n    private renderExpander: IAccordionVerticalProps<IAccountSummaryItemConfig>[\"renderExpander\"] =\n    ({config, isOpen, onClick, onResize, isFullWidth}) => {\n        return <Expander\n            label={config.label}\n            value={config.value()}\n            open={isOpen}\n            onClick={onClick}\n            onResize={onResize}\n            fullWidth={isFullWidth}\n            locale={this.props.locale}\n        />;\n    }\n\n    private renderContent: IAccordionVerticalProps<IAccountSummaryItemConfig>[\"renderContent\"] =\n    ({ content, status, arrowPosition }) => {\n        if (status !== AccordionItemContentStatus.Loaded) {\n            return <LayoutRow>\n                <LayoutRowItem>\n                    <Label></Label>\n                    {content}\n                </LayoutRowItem>\n            </LayoutRow>;\n        }\n\n        return (\n            <ThemeContext.Consumer>\n                {(theme) =>\n                    <AccordionInAccountMargin>\n                        <AccordionContentFrame\n                            arrowPosition={arrowPosition ? arrowPosition + theme.spacing.sidebarWidth : void 0}\n                            backgroundColor={theme.colors.gridEvenRowBg}\n                            borderColor={theme.colors.gridBorder}\n                            noBorder\n                        >{content}</AccordionContentFrame>\n                    </AccordionInAccountMargin>\n                }\n            </ThemeContext.Consumer>\n        );\n    }\n\n    private buildItems(account: IAccountDetails) {\n        let tr = this.props.translation;\n        let { txCounts } = this.props;\n\n        if (!txCounts) {\n            return null;\n        }\n\n        let items = <>\n            <AccordionItem<IAccountSummaryItemConfig>\n                label={tr.get(\"accountView.content.accountSummary.contractMessages.label\")}\n                value={() => account.countContractMsgIn + account.countContractMsgOut}\n                content={async () => {\n                    let paginatedView = new CursorPaginatedView<ICmLiteByAccount, ICursor>(\n                        {\n                            fetch: (atCursor: ICursor, limit: number) =>\n                                this.props.cmLiteByAccountStore.fetch(account.address, atCursor, limit)\n                        },\n                        {\n                            blockNo: account.countsBlockNumber + 1,\n                            blockMsgValidationIndex: 0\n                        },\n                        PAGINATION_PAGE_SIZE,\n                        (item) => ({\n                            blockNo: item.block.id,\n                            blockMsgValidationIndex: item.blockMsgValidationIndex\n                        })\n                    );\n\n                    // Pre-fetch\n                    await paginatedView.loadFirstPage();\n                    return <GridRoot>\n                        <CmGrid\n                            itemCount={account.countContractMsgIn + account.countContractMsgOut}\n                            paginatedView={paginatedView}\n                            accountAddress={account.address}\n                            translation={tr}\n                            locale={this.props.locale}\n                            logger={this.props.logger}\n                        />\n                    </GridRoot>;\n                }}\n            />\n            <AccordionItem<IAccountSummaryItemConfig>\n                label={tr.get(\"accountView.content.accountSummary.pendingTransactions.label\")}\n                value={() => this.props.txCounts!.pending}\n                content={async () => {\n                    let paginatedView = new OffsetPaginatedView(\n                        {\n                            fetch: (offset, limit) => this.props.txLiteByAccountStore.fetchPending(\n                                account.address, offset, limit\n                            )\n                        },\n                        0,\n                        PAGINATION_PAGE_SIZE\n                    );\n                    // Pre-fetch\n                    await paginatedView.loadFirstPage();\n\n                    // Observer for changing txCounts\n                    return <Observer>\n                        {() => <GridRoot>\n                            <TxsPendingGrid\n                                accountAddress={account.address}\n                                paginatedView={paginatedView}\n                                itemCount={this.props.txCounts!.pending}\n                                translation={tr}\n                                locale={this.props.locale}\n                                logger={this.props.logger}\n                            />\n                        </GridRoot>}\n                    </Observer>;\n                }}\n            />\n            <AccordionItem<IAccountSummaryItemConfig>\n                label={tr.get(\"accountView.content.accountSummary.minedTransactions.label\")}\n                value={() => this.props.txCounts!.in + this.props.txCounts!.out}\n                content={async () => {\n                    let paginatedView = new CursorPaginatedView<\n                        ITxLiteByAccountMined, ICursor | undefined\n                    >(\n                        {\n                            fetch: (atCursor, limit) => this.props.txLiteByAccountStore.fetchMined(\n                                account.address, atCursor, limit\n                            )\n                        },\n                        void 0,\n                        PAGINATION_PAGE_SIZE,\n                        (item) => ({\n                            blockNo: item.block.id,\n                            blockMsgValidationIndex: item.blockMsgValidationIndex\n                        })\n                    );\n                    // Pre-fetch\n                    await paginatedView.loadFirstPage();\n                    return <GridRoot>\n                        <TxsMinedGrid\n                            paginatedView={paginatedView}\n                            itemCount={this.props.txCounts!.in + this.props.txCounts!.out}\n                            accountAddress={account.address}\n                            translation={tr}\n                            locale={this.props.locale}\n                            logger={this.props.logger}\n                        />\n                    </GridRoot>;\n                }}\n            />\n        </>;\n\n        return items;\n    }\n}\n","import * as React from \"react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxCounts } from \"../ITxCounts\";\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\nimport { MessageSummaryCountBox } from \"./MessageSummaryCountBox\";\nimport { MsgCountInIcon } from \"@alethio/ui/lib/icon/MsgCountInIcon\";\nimport { MsgCountOutIcon } from \"@alethio/ui/lib/icon/MsgCountOutIcon\";\nimport { MsgCountPendingIcon } from \"@alethio/ui/lib/icon/MsgCountPendingIcon\";\nimport { NotAvailableBox } from \"app/shared/component/NotAvailableBox\";\nimport { AccountSummary } from \"app/eth-extended/module/account/summary/component/AccountSummary\";\nimport { IAccountDetails } from \"app/eth-extended/data/account/details/IAccountDetails\";\nimport { ILogger } from \"plugin-api/ILogger\";\nimport { CmLiteByAccountStore } from \"app/eth-extended/data/contractMsg/lite/byAccount/CmLiteByAccountStore\";\nimport { TxLiteByAccountStore } from \"app/eth-extended/data/tx/lite/byAccount/TxLiteByAccountStore\";\n\nexport interface ISummaryProps {\n    accountDetails: IAccountDetails;\n    translation: ITranslation;\n    txCounts: ITxCounts;\n    locale: string;\n    logger: ILogger;\n    cmLiteByAccountStore: CmLiteByAccountStore;\n    txLiteByAccountStore: TxLiteByAccountStore;\n}\n\nexport class Summary extends React.Component<ISummaryProps> {\n    render() {\n        let {\n            translation: tr, txCounts, locale, accountDetails: account, cmLiteByAccountStore, txLiteByAccountStore\n        } = this.props;\n\n        if (account.isFresh) {\n            return null;\n        }\n\n        return (\n            <div style={{flex: \"1 1 auto\"}}>\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"accountView.content.messageSummary.label\")}</Label>\n                        { txCounts ?\n                            <>\n                                <TooltipRegular\n                                    content={tr.get(\"accountView.content.messageSummary.incoming.tooltip\")}\n                                >\n                                    <MessageSummaryCountBox\n                                        icon={<MsgCountInIcon />} count={txCounts.in} locale={locale} />\n                                </TooltipRegular>\n                                <TooltipRegular\n                                    content={tr.get(\"accountView.content.messageSummary.outgoing.tooltip\")}\n                                >\n                                    <MessageSummaryCountBox\n                                        icon={<MsgCountOutIcon />} count={txCounts.out} locale={locale} />\n                                </TooltipRegular>\n                                <TooltipRegular\n                                    content={tr.get(\"accountView.content.messageSummary.pending.tooltip\")}\n                                >\n                                    <MessageSummaryCountBox\n                                        icon={<MsgCountPendingIcon />} count={txCounts.pending}\n                                        locale={locale}\n                                    />\n                                </TooltipRegular>\n                            </>\n                        : <NotAvailableBox translation={tr} /> }\n                    </LayoutRowItem>\n                </LayoutRow>\n                <AccountSummary\n                    account={account}\n                    translation={tr}\n                    locale={locale}\n                    logger={this.props.logger}\n                    cmLiteByAccountStore={cmLiteByAccountStore}\n                    txCounts={txCounts}\n                    txLiteByAccountStore={txLiteByAccountStore}\n                />\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}