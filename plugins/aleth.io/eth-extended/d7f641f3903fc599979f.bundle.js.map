{"version":3,"sources":["webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/ChartContainer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceChartLoadingMask.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceChartData.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/ChartTooltip.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceChartTooltipTop.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceChartTooltipBottom.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceAreaChart.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/ChartSection.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/ContentBottomSection.ts","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalancePieChart.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/chart/BalanceAreaChartSmall.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/EthBalanceDetails.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/AllTokensBalanceDetails.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/grid/FractionRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/grid/BalanceChartRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/grid/TokenBalanceRenderer.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/TokenBalanceGridFields.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/TokenBalanceGrid.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/BalanceSection.tsx","webpack://__aleth_io__ethExtended/./app/eth-extended/module/account/balance/component/Balance.tsx"],"names":["ChartContainer","styled_components","div","withConfig","displayName","componentId","props","theme","mediaQueries","breakPoints","smallerThanStandardView","BalanceChartLoadingMaskRoot","ContentWrapper","BalanceChartLoadingMask_BalanceChartLoadingMask","external_react_","[object Object]","this","children","CHART_DATA_KEY","ChartTooltip_$ChartTooltip","active","coordinate","viewBox","height","width","payload","colors","refEl","referenceEl","refOffset","Object","dom","top","placement","window","scrollY","left","number","x","scrollX","Popover","offset","arrow","noArrow","nonInteractive","noFlip","visible","referenceElement","getBoundingClientRect","bottom","right","clientHeight","clientWidth","content","backgroundColor","accountBalanceChartOverlayBg","borderColor","accountBalanceChartOverlayBorder","style","borderRadius","ChartTooltip","Root","BalanceChartTooltipTop_BalanceChartTooltipTop","EthValueBox","locale","wei","balanceWei","variant","UsdValueBox","value","BalanceChartTooltipBottom_Root","valueBox","secondary","text","BalanceChartTooltipBottom_BalanceChartTooltipBottom","ShortDate","timestamp","CHART_HEIGHT","CIRCLE_FILTER_ID","$ActiveDot","cx","cy","r","fill","stroke","filter","accountBalanceChartStroke","ActiveDot","BalanceAreaChart_$BalanceAreaChart","chartData","data","disabled","fillColor","accountBalanceChartFill","strokeColor","accountBalanceChartDisabledStroke","refStrokeColor","accountBalanceChartRefStroke","domainMin","Math","floor","min","domainMax","ceil","max","padY","resY","ref","rootEl","es6","margin","points","id","y","result","in","dx","dy","stdDeviation","type","slope","x1","x2","length","y1","y2","fillOpacity","alwaysShow","dataKey","strokeOpacity","isAnimationActive","strokeDasharray","round","cursor","assign","strokeWidth","activeDot","hide","domain","BalanceAreaChart","ChartSection_ChartSection","ChartSection","accountBalance","isFreshAccount","translation","tr","loadStatus","LoadStatus_","Loaded","Loading","SpinnerRegular","size","ErrorIconHint","isLoaded","computeChartData","getPlaceholderChartData","Infinity","computeTotalBalance","map","balance","point","usd","reverse","Array","AccountBalanceStore","tslib_es6","external_mobx_react_","ContentBottomSection","mainContentBg","BalancePieChart_$BalancePieChart","percentage","color","accountPieChartFill","accountPieChartBg","dist_default","a","totalValue","startAngle","lengthAngle","clockwise","boxShadow","BalancePieChart","BalanceAreaChartSmall_CHART_HEIGHT","STROKE_WIDTH","BalanceAreaChartSmall_$BalanceAreaChartSmall","accountBalanceChartSmallFill","accountBalanceChartSmallStroke","BalanceAreaChartSmall","EthBalanceDetails_EthBalanceDetails","ethBalance","newestDataPoint","chart","percentFraction","totalBalance","balanceUsd","LayoutBoxItem","ResponsiveContainer","behavior","forScreenWidth","lowerThan","ForFullView","ValueBox","toLocaleString","minimumFractionDigits","maximumFractionDigits","getChartData","justifyContent","AllTokensBalanceDetails_AllTokensBalanceDetails","totalTokenUsdBalance","tokenAggregatedBalance","Expander","label","get","totalTokenTypes","open","expanded","onClick","onToggleExpand","FractionRenderer","totalBalanceUsd","f","BalanceChartRenderer_BalanceChartRenderer","TokenBalanceGridDataRoot","TokenBalanceGridDataSymbol","span","accountSymbolGrid","TokenBalanceRenderer_TokenBalanceRenderer","balanceGetter","symbolGetter","bigN","symbol","flexGrow","display","data_Number","ITokenBalanceGridFieldKeys","TokenBalanceGridFields_TokenBalanceGridFields","GridFields","t","totalTokenBalanceUsd","super","fields","fieldKey","Name","isSortable","selected","getFieldValue","currency","name","renderer","GridLink","to","address","Balance","shiftedBy","decimals","BalanceUsd","UsdRenderer","PercentFraction","defaultSortOrder","GridSortingOrder","Descending","Chart","defaultSortedField","find","TokenBalanceGrid_TokenBalanceGrid","tokenBalances","reduce","acc","item","gridFields","gridSortingOptions","GridSortingOptions","prevProps","rows","tk","key","Grid","sortingOptions","BalanceSectionRoot","accountHasTokens","BalanceSectionGrid","BalanceGridRoot","ContentLeftPadded","spacing","sidebarWidth","BalanceSection_BalanceSection","BalanceSection","toggleTokenBalanceContent","tokenBalanceExpanded","historicalBalance","hasTokens","LayoutRow","LayoutRowItem","Label","responsive","ignoreFirstLabel","autoHeight","getEthBalance","aggregateTokenBalance","getTokenTypeCount","Fade","duration","delay","getAllTokenBalances","external_mobx_","__webpack_require__","d","__webpack_exports__","Balance_Balance","ForStandardView","Spacer"],"mappings":"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","file":"d7f641f3903fc599979f.bundle.js","sourcesContent":["import styled from \"@alethio/explorer-ui/lib/styled-components\";\n\nexport const ChartContainer = styled.div`\n    /* Position relative to constrain the loading mask */\n    position: relative;\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanStandardView} {\n        display: none;\n    }\n`;\n","import * as React from \"react\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\n\nconst BalanceChartLoadingMaskRoot = styled.div`\n    position: absolute;\n    z-index: 100;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n`;\n\nconst ContentWrapper = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n\nexport class BalanceChartLoadingMask extends React.Component {\n    render() {\n        return <BalanceChartLoadingMaskRoot>\n            <ContentWrapper>\n                {this.props.children}\n            </ContentWrapper>\n        </BalanceChartLoadingMaskRoot>;\n    }\n}\n","export const CHART_DATA_KEY = \"balanceUsd\";\n\nexport interface IPortfolioChartAreaData {\n    [CHART_DATA_KEY]: number;\n}\n\nexport interface IPortfolioChartData<TPayload extends IPortfolioChartAreaData> {\n    min: number;\n    max: number;\n    points: TPayload[];\n}\n","import * as React from \"react\";\nimport { TooltipProps } from \"recharts\";\nimport { getOffset } from \"@puzzl/browser/lib/dom\";\nimport { Popover } from \"@alethio/ui/lib/overlay/Popover\";\nimport { clamp } from \"@puzzl/core/lib/math/number\";\nimport { IBalanceAreaChartPayload } from \"./IBalanceAreaChartPayload\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\n\nexport interface IChartTooltipProps extends TooltipProps {\n    placement: \"top\" | \"bottom\";\n    arrow?: boolean;\n    referenceEl: HTMLElement;\n    theme: ITheme;\n    children(payload: IBalanceAreaChartPayload): React.ReactElement<{}>;\n}\n\nclass $ChartTooltip extends React.Component<IChartTooltipProps> {\n    render() {\n        if (!this.props.active || !this.props.coordinate ||\n            !this.props.viewBox ||\n            this.props.viewBox.height === void 0 ||\n            this.props.viewBox.width === void 0 ||\n            !this.props.payload) {\n            return null;\n        }\n\n        let colors = this.props.theme.colors;\n\n        let payload: IBalanceAreaChartPayload = (this.props.payload[0] as any).payload;\n\n        let refEl = this.props.referenceEl;\n        let refOffset = getOffset(refEl);\n\n        // Viewport top and left\n        let top = refOffset.top + (this.props.placement === \"top\" ? 0 : this.props.viewBox.height) - window.scrollY;\n        // TODO: this ensure tooltip and arrow stay in the viewport. Should be fixed from graph x axis limits\n        let left = clamp(refOffset.left + this.props.coordinate.x, 15, this.props.viewBox.width - 15) - window.scrollX;\n\n        return <Popover\n            offset={this.props.arrow ? 5 : 0}\n            noArrow={!this.props.arrow}\n            nonInteractive={true}\n            placement={this.props.placement}\n            noFlip\n            visible\n            referenceElement={{\n                getBoundingClientRect() {\n                    return {bottom: top, left, right: left, top, height: 0, width: 0};\n                },\n                clientHeight: 0,\n                clientWidth: 0\n            }}\n            content={this.props.children(payload)}\n            backgroundColor={colors.accountBalanceChartOverlayBg}\n            borderColor={colors.accountBalanceChartOverlayBorder}\n            style={{\n                borderRadius: \"3px\"\n            }}\n        >\n            <div />\n        </Popover>;\n    }\n}\n\nexport const ChartTooltip = withTheme($ChartTooltip);\n","import * as React from \"react\";\nimport { UsdValueBox } from \"@alethio/ui/lib/data/box/UsdValueBox\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { IBalanceAreaChartPayload } from \"./IBalanceAreaChartPayload\";\nimport { CHART_DATA_KEY } from \"./BalanceChartData\";\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\n\nconst Root = styled.div`\n    padding: 9px 11px;\n    display: flex;\n`;\n\nexport interface IBalanceChartTooltipTopProps {\n    locale: string;\n    payload: IBalanceAreaChartPayload;\n}\n\nexport class BalanceChartTooltipTop extends React.Component<IBalanceChartTooltipTopProps> {\n    render() {\n        return (\n            <Root>\n                <EthValueBox\n                    locale={this.props.locale}\n                    wei={this.props.payload.balanceWei}\n                    variant=\"small\"\n                />\n                <UsdValueBox\n                    locale={this.props.locale}\n                    value={this.props.payload[CHART_DATA_KEY]}\n                    variant=\"small\"\n                />\n            </Root>\n        );\n    }\n}\n","import * as React from \"react\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { IBalanceAreaChartPayload } from \"./IBalanceAreaChartPayload\";\nimport { ShortDate } from \"@alethio/ui/lib/data/ShortDate\";\n\nconst Root = styled.div`\n    padding: 3px 12px 5px 12px;\n    font-size: 12px;\n    line-height: 14px;\n    font-weight: 600;\n    color: ${props => props.theme.colors.valueBox.secondary.text};\n`;\n\nexport interface IBalanceChartTooltipBottomProps {\n    locale: string;\n    payload: IBalanceAreaChartPayload;\n}\n\nexport class BalanceChartTooltipBottom extends React.Component<IBalanceChartTooltipBottomProps> {\n    render() {\n        return (\n            <Root>\n                <ShortDate\n                    timestamp={this.props.payload.timestamp}\n                    locale={this.props.locale}\n                />\n            </Root>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {\n    ResponsiveContainer, ReferenceLine, AreaChart, Area, YAxis, Tooltip, DotProps, TooltipProps,\n    ReferenceArea\n} from \"recharts\";\nimport { IPortfolioChartData, CHART_DATA_KEY } from \"./BalanceChartData\";\nimport { ChartTooltip } from \"./ChartTooltip\";\nimport { BalanceChartTooltipTop } from \"./BalanceChartTooltipTop\";\nimport { BalanceChartTooltipBottom } from \"./BalanceChartTooltipBottom\";\nimport { IBalanceAreaChartPayload } from \"./IBalanceAreaChartPayload\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\n\nconst CHART_HEIGHT = 250;\nconst CIRCLE_FILTER_ID = \"BalanceChart-circleShadow\";\n\nconst $ActiveDot = (props: DotProps & {theme: ITheme}) => <g>\n    <circle cx={props.cx} cy={props.cy} r=\"12\"\n        fill={props.theme.colors.accountBalanceChartOverlayBg}\n        stroke={props.theme.colors.accountBalanceChartOverlayBorder}\n        filter={`url(#${CIRCLE_FILTER_ID})`} />\n    <circle cx={props.cx} cy={props.cy} r=\"4\"\n        fill={props.theme.colors.accountBalanceChartStroke} />\n</g>;\n\nconst ActiveDot = withTheme($ActiveDot);\n\nexport interface IBalanceAreaChartProps {\n    data: IPortfolioChartData<IBalanceAreaChartPayload>;\n    locale: string;\n    disabled?: boolean;\n    theme: ITheme;\n}\n\nclass $BalanceAreaChart extends React.Component<IBalanceAreaChartProps> {\n    private rootEl: HTMLElement;\n\n    render() {\n        let chartData = this.props.data;\n        let locale = this.props.locale;\n        let colors = this.props.theme.colors;\n        let disabled = this.props.disabled;\n\n        let fillColor = colors.accountBalanceChartFill;\n        let strokeColor = !disabled ? colors.accountBalanceChartStroke : colors.accountBalanceChartDisabledStroke;\n        let refStrokeColor = colors.accountBalanceChartRefStroke;\n\n        let domainMin = Math.floor(chartData.min);\n        let domainMax = Math.ceil(chartData.max);\n\n        // We need to convert vertical padding from px value to chartData domain\n        let padY = 17; // px\n        let resY = (domainMax - domainMin) / (CHART_HEIGHT - 2 * padY);\n\n        return (\n            <div ref={ref => this.rootEl = ref!}>\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\n                <AreaChart margin={{top: 0, bottom: 0, left: 0, right: 0}} data={chartData.points}>\n                    <defs>\n                        {/* Filter for active dot box shadow */}\n                        <filter id={CIRCLE_FILTER_ID} x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                            <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"0\" dy=\"2\" />\n                            <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"6\" />\n                            <feComponentTransfer>\n                                <feFuncA type=\"linear\" slope=\"0.08\" />\n                            </feComponentTransfer>\n                            <feMerge>\n                                <feMergeNode />\n                                <feMergeNode in=\"SourceGraphic\" />\n                            </feMerge>\n                        </filter>\n                    </defs>\n                    {/*\n                    The two reference areas expand the Y domain due to the alwaysShow property.\n                    The bottom area also ensures the padding is filled with the same color as the main area fill.\n                    It is the only way to add vertical padding without affecting the area fill.\n                    */}\n                    <ReferenceArea\n                        x1={0} x2={chartData.points.length - 1}\n                        y1={domainMin - padY * resY} y2={domainMin}\n                        fill={fillColor} fillOpacity={1} alwaysShow={true}\n                    />\n                    <ReferenceArea\n                        x1={0} x2={chartData.points.length - 1}\n                        y1={domainMax} y2={domainMax + padY * resY}\n                        fillOpacity={0} alwaysShow={true}\n                    />\n                    {/* Area used only for rendering the fill below the reference lines */}\n                    <Area\n                        type=\"monotone\" dataKey={CHART_DATA_KEY}\n                        strokeOpacity={0}\n                        fill={fillColor}\n                        fillOpacity={1}\n                        isAnimationActive={!disabled}\n                    />\n                    <ReferenceLine y={domainMax} stroke={refStrokeColor} strokeDasharray=\"3 1\" />\n                    <ReferenceLine\n                        y={Math.round((domainMax + domainMin) / 2)} stroke={refStrokeColor}\n                        strokeDasharray=\"3 1\"\n                    />\n                    <ReferenceLine y={domainMin} stroke={refStrokeColor} strokeDasharray=\"3 1\" />\n                    { !disabled ?\n                    <Tooltip\n                        offset={0}\n                        cursor={{ stroke: refStrokeColor }}\n                        content={(props: TooltipProps) =>\n                            <>\n                            <ChartTooltip placement=\"top\" arrow {...props} referenceEl={this.rootEl}>\n                                {(payload) => (\n                                    <BalanceChartTooltipTop locale={locale} payload={payload} />\n                                )}\n                            </ChartTooltip>\n                            <ChartTooltip placement=\"bottom\" {...props} referenceEl={this.rootEl}>\n                                {(payload) => (\n                                    <BalanceChartTooltipBottom locale={locale} payload={payload} />\n                                )}\n                            </ChartTooltip>\n                            </>\n                        }\n                        isAnimationActive={false}\n                    />\n                    : null }\n                    <Area\n                        type=\"monotone\" dataKey={CHART_DATA_KEY}\n                        stroke={strokeColor} strokeWidth={3}\n                        fillOpacity={0}\n                        activeDot={!disabled ? <ActiveDot /> : void 0}\n                        isAnimationActive={!disabled}\n                    />\n                    <YAxis\n                        hide={true}\n                        domain={[ domainMin, domainMax ]}\n                    />\n                </AreaChart>\n            </ResponsiveContainer>\n            </div>\n        );\n    }\n}\n\nexport const BalanceAreaChart = withTheme($BalanceAreaChart);\n","import * as React from \"react\";\nimport { ChartContainer } from \"./ChartContainer\";\nimport { AccountBalance } from \"app/eth-extended/data/account/balance/AccountBalance\";\nimport { observer } from \"mobx-react\";\nimport { LoadStatus } from \"plugin-api/LoadStatus\";\nimport { BalanceChartLoadingMask } from \"./chart/BalanceChartLoadingMask\";\nimport { SpinnerRegular } from \"@alethio/ui/lib/fx/SpinnerRegular\";\nimport { ErrorIconHint } from \"app/shared/component/ErrorIconHint\";\nimport { BalanceAreaChart } from \"./chart/BalanceAreaChart\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { IPortfolioChartData, CHART_DATA_KEY } from \"./chart/BalanceChartData\";\nimport { IBalanceAreaChartPayload } from \"./chart/IBalanceAreaChartPayload\";\nimport { BALANCE_HISTORY_DAYS } from \"app/eth-extended/data/account/balance/AccountBalanceStore\";\nimport { IAsyncData } from \"plugin-api/IAsyncData\";\n\nexport interface IChartSectionProps {\n    accountBalance: IAsyncData<AccountBalance>;\n    isFreshAccount: boolean;\n    translation: ITranslation;\n    locale: string;\n}\n\n@observer\nexport class ChartSection extends React.Component<IChartSectionProps> {\n    render() {\n        let { accountBalance, isFreshAccount, translation: tr, locale } = this.props;\n\n        return (\n            <ChartContainer>\n                { !isFreshAccount && accountBalance.loadStatus !== LoadStatus.Loaded ? <BalanceChartLoadingMask>\n                    { accountBalance.loadStatus === LoadStatus.Loading ?\n                    <SpinnerRegular size={36} /> :\n                    <ErrorIconHint translation={tr} size={36} /> }\n                </BalanceChartLoadingMask> : void 0 }\n                <BalanceAreaChart\n                    data={!isFreshAccount && accountBalance.isLoaded() ?\n                        this.computeChartData(accountBalance.data) : this.getPlaceholderChartData()}\n                    locale={locale}\n                    disabled={isFreshAccount || !accountBalance.isLoaded()}\n                />\n            </ChartContainer>\n        );\n    }\n\n    private computeChartData(accountBalance: AccountBalance) {\n        let data: IPortfolioChartData<IBalanceAreaChartPayload> = {\n            max: -Infinity,\n            min: +Infinity,\n            points: []\n        };\n        data.points = accountBalance.computeTotalBalance().map(balance => {\n            let point: IBalanceAreaChartPayload = {\n                [CHART_DATA_KEY]: balance.usd,\n                balanceWei: balance.wei,\n                timestamp: balance.timestamp\n            };\n            data.min = Math.min(data.min, balance.usd);\n            data.max = Math.max(data.max, balance.usd);\n            return point;\n        }).reverse();\n\n        // Ensure we don't get a \"thin\" chart stroke at the minimum\n        if (data.max - data.min < 1) {\n            data.max = data.min + 1;\n        }\n\n        return data;\n    }\n\n    getPlaceholderChartData() {\n        let data: IPortfolioChartData<IBalanceAreaChartPayload> = {\n            max: 10,\n            min: 0,\n            // Match the number of data points that will be fetched from the server.\n            // This ensures a smooth animation when the chart loads\n            points: Array(BALANCE_HISTORY_DAYS).fill(\n                {[CHART_DATA_KEY]: 0} as IBalanceAreaChartPayload\n            )\n        };\n        return data;\n    }\n}\n","import styled from \"@alethio/explorer-ui/lib/styled-components\";\n\nexport const ContentBottomSection = styled.div`\n    background-color: ${props => props.theme.colors.mainContentBg};\n    box-sizing: border-box;\n`;\n","import * as React from \"react\";\nimport PieChart from \"react-minimal-pie-chart\";\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\n\ninterface IBalancePieChartProps {\n    percentage: number;\n    clockwise?: boolean;\n    theme: ITheme;\n}\n\nclass $BalancePieChart extends React.PureComponent<IBalancePieChartProps> {\n    render() {\n        const colors = this.props.theme.colors;\n        const percentage = Math.round(Math.min(100, Math.max(0, this.props.percentage)));\n        const data = [{\n            value: percentage, color: colors.accountPieChartFill\n        }, {\n            value: 100 - percentage, color: colors.accountPieChartBg\n        }];\n        return <PieChart\n            data={data}\n            totalValue={100}\n            startAngle={270}\n            lengthAngle={this.props.clockwise ? -360 : 360}\n            style={{\n                width: \"24px\",\n                height: \"24px\",\n                margin: \"1px 0\",\n                boxShadow: \"0 2px 6px 0 rgba(0,0,0,0.04)\",\n                borderRadius: \"50%\"\n            }}\n        />;\n    }\n}\n\nexport const BalancePieChart = withTheme($BalancePieChart);\n","import * as React from \"react\";\nimport { AreaChart, Area, YAxis, ReferenceArea } from \"recharts\";\nimport { CHART_DATA_KEY, IPortfolioChartData } from \"./BalanceChartData\";\nimport { IBalanceAreaChartSmallPayload } from \"./IBalanceAreaChartSmallPayload\";\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\n\nconst CHART_HEIGHT = 18;\nconst STROKE_WIDTH = 2;\n\nexport interface IBalanceAreaChartSmallProps {\n    data: IPortfolioChartData<IBalanceAreaChartSmallPayload>;\n    theme: ITheme;\n}\n\nclass $BalanceAreaChartSmall extends React.Component<IBalanceAreaChartSmallProps> {\n    render() {\n        let { data, theme } = this.props;\n        let colors = theme.colors;\n\n        let fillColor = colors.accountBalanceChartSmallFill;\n\n        // We need to convert vertical padding from px value to chartData domain\n        let padY = STROKE_WIDTH; // px\n        let resY = (data.max - data.min) / (CHART_HEIGHT - 2 * padY);\n\n        return (\n            <AreaChart\n                width={174} height={CHART_HEIGHT} margin={{top: 0, bottom: 0, left: 0, right: 0}}\n                data={data.points}\n            >\n                {/*\n                The two reference areas expand the Y domain due to the alwaysShow property.\n                The bottom area also ensures the padding is filled with the same color as the main area fill.\n                It is the only way to add vertical padding without affecting the area fill.\n                */}\n                <ReferenceArea\n                    x1={0} x2={data.points.length - 1}\n                    y1={data.min - padY * resY} y2={data.min}\n                    fill={fillColor} fillOpacity={1} alwaysShow={true}\n                />\n                <ReferenceArea\n                    x1={0} x2={data.points.length - 1}\n                    y1={data.max} y2={data.max + padY * resY}\n                    fillOpacity={0} alwaysShow={true}\n                />\n                <Area\n                    type=\"monotone\"\n                    dataKey={CHART_DATA_KEY}\n                    stroke={colors.accountBalanceChartSmallStroke}\n                    strokeWidth={STROKE_WIDTH}\n                    fill={fillColor}\n                    fillOpacity={1}\n                    isAnimationActive={false}\n                />\n                <YAxis\n                    hide={true}\n                    domain={[ data.min, data.max ]}\n                />\n            </AreaChart>\n        );\n    }\n}\n\nexport const BalanceAreaChartSmall = withTheme($BalanceAreaChartSmall);\n","import * as React from \"react\";\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { BalancePieChart } from \"./chart/BalancePieChart\";\nimport { UsdValueBox } from \"@alethio/ui/lib/data/box/UsdValueBox\";\nimport { ITotalBalance } from \"app/eth-extended/data/account/balance/ITotalBalance\";\nimport { CHART_DATA_KEY, IPortfolioChartData } from \"./chart/BalanceChartData\";\nimport { BalanceAreaChartSmall } from \"./chart/BalanceAreaChartSmall\";\nimport { IAccountBalanceData } from \"app/eth-extended/data/account/balance/IAccountBalanceDataSet\";\nimport { IBalanceAreaChartSmallPayload } from \"./chart/IBalanceAreaChartSmallPayload\";\nimport { LayoutBoxItem } from \"@alethio/ui/lib/layout/content/LayoutBoxItem\";\nimport { ResponsiveContainer, MinimumWidth } from \"@alethio/ui/lib/layout/responsive/ResponsiveContainer\";\n\ninterface IEthBalanceDetailsProps {\n    ethBalance: IAccountBalanceData;\n    totalBalance: ITotalBalance;\n    locale: string;\n}\n\nexport class EthBalanceDetails extends React.PureComponent<IEthBalanceDetailsProps> {\n    render() {\n        let locale = this.props.locale;\n        let ethBalance = this.props.ethBalance;\n        let newestDataPoint = ethBalance.chart[0];\n        let percentFraction = this.props.totalBalance.usd ?\n            newestDataPoint.balanceUsd / this.props.totalBalance.usd :\n            1;\n\n        return (\n            <>\n                <LayoutBoxItem>\n                    <EthValueBox wei={newestDataPoint.balance} locale={locale} />\n                </LayoutBoxItem>\n                <ResponsiveContainer behavior=\"hide\" forScreenWidth={{lowerThan: MinimumWidth.ForFullView}}>\n                    <LayoutBoxItem>\n                        <ValueBox>\n                            <BalancePieChart percentage={percentFraction * 100} />\n                        </ValueBox>\n                    </LayoutBoxItem>\n                </ResponsiveContainer>\n                <LayoutBoxItem>\n                    <ValueBox>{percentFraction.toLocaleString(locale, {\n                        style: \"percent\", minimumFractionDigits: 0, maximumFractionDigits: 2})\n                    }</ValueBox>\n                </LayoutBoxItem>\n                <ResponsiveContainer behavior=\"hide\" forScreenWidth={{lowerThan: MinimumWidth.ForFullView}}>\n                    <LayoutBoxItem>\n                        <ValueBox>\n                            <BalanceAreaChartSmall data={this.getChartData()} />\n                        </ValueBox>\n                    </LayoutBoxItem>\n                </ResponsiveContainer>\n                <LayoutBoxItem justifyContent=\"flex-end\">\n                    <UsdValueBox\n                        colors=\"secondary\"\n                        value={newestDataPoint.balanceUsd}\n                        locale={locale}\n                    />\n                </LayoutBoxItem>\n            </>\n        );\n    }\n\n    private getChartData() {\n        // TODO: dedupe this logic (see BalanceChartRenderer, ChartSection and AllTokensBalanceDetails)\n        let data: IPortfolioChartData<IBalanceAreaChartSmallPayload> = {\n            max: -Infinity,\n            min: +Infinity,\n            points: []\n        };\n        data.points = this.props.ethBalance.chart.map(balance => {\n            let point: IBalanceAreaChartSmallPayload = {\n                [CHART_DATA_KEY]: balance.balanceUsd\n            };\n            data.min = Math.min(data.min, balance.balanceUsd);\n            data.max = Math.max(data.max, balance.balanceUsd);\n            return point;\n        }).reverse();\n\n        // Ensure we don't get a \"thin\" chart stroke at the minimum\n        if (data.max - data.min < 1) {\n            data.max = data.min + 1;\n        }\n\n        return data;\n    }\n}\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { BalancePieChart } from \"./chart/BalancePieChart\";\nimport { UsdValueBox } from \"@alethio/ui/lib/data/box/UsdValueBox\";\nimport { CHART_DATA_KEY, IPortfolioChartData } from \"./chart/BalanceChartData\";\nimport { BalanceAreaChartSmall } from \"./chart/BalanceAreaChartSmall\";\nimport { ITokenAggregatedBalance } from \"app/eth-extended/data/account/balance/ITokenAggregatedBalance\";\nimport { ITotalBalance } from \"app/eth-extended/data/account/balance/ITotalBalance\";\nimport { IBalanceAreaChartSmallPayload } from \"./chart/IBalanceAreaChartSmallPayload\";\nimport { LayoutBoxItem } from \"@alethio/ui/lib/layout/content/LayoutBoxItem\";\nimport { Expander } from \"@alethio/ui/lib/control/expander/Expander\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ResponsiveContainer, MinimumWidth } from \"@alethio/ui/lib/layout/responsive/ResponsiveContainer\";\n\ninterface IAllTokensBalanceDetailsProps {\n    tokenAggregatedBalance: ITokenAggregatedBalance[];\n    totalTokenTypes: number;\n    totalBalance: ITotalBalance;\n    locale: string;\n    translation: ITranslation;\n    expanded: boolean;\n    onToggleExpand(): void;\n}\n\nexport class AllTokensBalanceDetails extends React.PureComponent<IAllTokensBalanceDetailsProps> {\n    render() {\n        let locale = this.props.locale;\n        let tr = this.props.translation;\n        let totalTokenUsdBalance = this.props.tokenAggregatedBalance[0].balanceUsd;\n        let percentFraction = this.props.totalBalance.usd ?\n            totalTokenUsdBalance / this.props.totalBalance.usd :\n            0;\n\n        return (\n            <>\n                <LayoutBoxItem>\n                    <Expander\n                        label={tr.get(\"accountView.content.tokens.label\")}\n                        value={this.props.totalTokenTypes}\n                        open={this.props.expanded}\n                        locale={locale}\n                        onClick={this.props.onToggleExpand}\n                    />\n                </LayoutBoxItem>\n                <ResponsiveContainer behavior=\"hide\" forScreenWidth={{lowerThan: MinimumWidth.ForFullView}}>\n                    <LayoutBoxItem>\n                        <ValueBox>\n                            <BalancePieChart percentage={percentFraction * 100} clockwise />\n                        </ValueBox>\n                    </LayoutBoxItem>\n                </ResponsiveContainer>\n                <LayoutBoxItem>\n                    <ValueBox>{percentFraction.toLocaleString(locale, {\n                        style: \"percent\", minimumFractionDigits: 0, maximumFractionDigits: 2})\n                    }</ValueBox>\n                </LayoutBoxItem>\n                <ResponsiveContainer behavior=\"hide\" forScreenWidth={{lowerThan: MinimumWidth.ForFullView}}>\n                    <LayoutBoxItem>\n                        <ValueBox>\n                            <BalanceAreaChartSmall data={this.getChartData()} />\n                        </ValueBox>\n                    </LayoutBoxItem>\n                </ResponsiveContainer>\n                <LayoutBoxItem justifyContent=\"flex-end\">\n                    <UsdValueBox colors=\"secondary\" value={totalTokenUsdBalance} locale={locale} />\n                </LayoutBoxItem>\n            </>\n        );\n    }\n\n    private getChartData() {\n        let data: IPortfolioChartData<IBalanceAreaChartSmallPayload> = {\n            max: -Infinity,\n            min: +Infinity,\n            points: []\n        };\n        data.points = this.props.tokenAggregatedBalance.map(balance => {\n            let point: IBalanceAreaChartSmallPayload = {\n                [CHART_DATA_KEY]: balance.balanceUsd\n            };\n            data.min = Math.min(data.min, balance.balanceUsd);\n            data.max = Math.max(data.max, balance.balanceUsd);\n            return point;\n        }).reverse();\n\n        // Ensure we don't get a \"thin\" chart stroke at the minimum\n        if (data.max - data.min < 1) {\n            data.max = data.min + 1;\n        }\n\n        return data;\n    }\n}\n","import { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { IAccountBalanceData } from \"app/eth-extended/data/account/balance/IAccountBalanceDataSet\";\n\nexport class FractionRenderer implements IGridFieldRenderer<IAccountBalanceData> {\n    constructor(\n        private locale: string,\n        private totalBalanceUsd: number\n    ) {\n    }\n\n    render(f: IAccountBalanceData) {\n        let percentFraction = this.totalBalanceUsd ?\n            f.chart[0].balanceUsd / this.totalBalanceUsd :\n            0;\n        return (\n            percentFraction.toLocaleString(this.locale, {\n                style: \"percent\", minimumFractionDigits: 0, maximumFractionDigits: 2\n            })\n        );\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { IAccountBalanceData } from \"app/eth-extended/data/account/balance/IAccountBalanceDataSet\";\nimport { BalanceAreaChartSmall } from \"../chart/BalanceAreaChartSmall\";\nimport { IBalanceAreaChartSmallPayload } from \"../chart/IBalanceAreaChartSmallPayload\";\nimport { CHART_DATA_KEY, IPortfolioChartData } from \"../chart/BalanceChartData\";\n\nexport class BalanceChartRenderer implements IGridFieldRenderer<IAccountBalanceData> {\n    render(f: IAccountBalanceData) {\n        return (\n            <BalanceAreaChartSmall data={this.getChartData(f)} />\n        );\n    }\n\n    private getChartData(f: IAccountBalanceData) {\n        let data: IPortfolioChartData<IBalanceAreaChartSmallPayload> = {\n            max: -Infinity,\n            min: +Infinity,\n            points: []\n        };\n        data.points = f.chart.map(balance => {\n            let point: IBalanceAreaChartSmallPayload = {\n                [CHART_DATA_KEY]: balance.balanceUsd\n            };\n            data.min = Math.min(data.min, balance.balanceUsd);\n            data.max = Math.max(data.max, balance.balanceUsd);\n            return point;\n        }).reverse();\n\n        // Ensure we don't get a \"thin\" chart stroke at the minimum\n        if (data.max - data.min < 1) {\n            data.max = data.min + 1;\n        }\n\n        return data;\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { BigNumber } from \"app/util/BigNumber\";\n\nconst TokenBalanceGridDataRoot = styled.div`\n    flex-grow: 1;\n    display: flex;\n`;\nconst TokenBalanceGridDataSymbol = styled.span`\n    padding-right: 16px;\n    color: ${({theme}) => theme.colors.accountSymbolGrid};\n    flex-grow: 1;\n    font-weight: 700;\n`;\n\nexport class TokenBalanceRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private locale: string,\n        private balanceGetter: (f: T) => number | BigNumber,\n        private symbolGetter: (f: T) => string\n    ) {\n    }\n\n    render(f: T) {\n        let bigN = this.balanceGetter(f);\n        let symbol = this.symbolGetter(f);\n        return (\n            <TokenBalanceGridDataRoot style={{flexGrow: 1, display: \"flex\"}}>\n                <TokenBalanceGridDataSymbol>{symbol}</TokenBalanceGridDataSymbol>\n                <div>\n                    <Number value={bigN} locale={this.locale} />\n                </div>\n            </TokenBalanceGridDataRoot>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { IAccountBalanceData } from \"app/eth-extended/data/account/balance/IAccountBalanceDataSet\";\nimport { FractionRenderer } from \"./grid/FractionRenderer\";\nimport { BalanceChartRenderer } from \"./grid/BalanceChartRenderer\";\nimport { UsdRenderer } from \"@alethio/ui/lib/data/gridRenderer/UsdRenderer\";\nimport { TokenBalanceRenderer } from \"./grid/TokenBalanceRenderer\";\nimport { GridLink } from \"@alethio/explorer-ui/lib/grid/GridLink\";\nimport { GridSortingOrder } from \"@alethio/ui/lib/control/grid/state/GridSortingOrder\";\n\nenum ITokenBalanceGridFieldKeys {\n    Name = \"name\",\n    Balance = \"balance\",\n    BalanceUsd = \"balanceUsd\",\n    Chart = \"chart\",\n    PercentFraction = \"percentFraction\"\n}\n\nexport class TokenBalanceGridFields extends GridFields<IAccountBalanceData> {\n    constructor(t: ITranslation, locale: string, totalTokenBalanceUsd: number) {\n        super();\n        this.fields = [{\n            label: t.get(\"accountView.content.balanceGrid.header.name\"),\n            fieldKey: ITokenBalanceGridFieldKeys.Name,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.currency.name,\n            renderer: (f) => <GridLink to={`page://aleth.io/account?accountHash=${f.currency.address}`} >\n                {f.currency.name}\n            </GridLink>\n        }, {\n            label: t.get(\"accountView.content.balanceGrid.header.balance\"),\n            fieldKey: ITokenBalanceGridFieldKeys.Balance,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.chart[0].balance.shiftedBy(-f.currency.decimals),\n            renderer: new TokenBalanceRenderer(\n                locale,\n                f => f.chart[0].balance.shiftedBy(-f.currency.decimals),\n                f => f.currency.symbol\n            )\n        }, {\n            label: t.get(\"accountView.content.balanceGrid.header.balanceUsd\"),\n            fieldKey: ITokenBalanceGridFieldKeys.BalanceUsd,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.chart[0].balanceUsd,\n            renderer: new UsdRenderer(locale, f => f.chart[0].balanceUsd)\n        }, {\n            label: t.get(\"accountView.content.balanceGrid.header.percent\"),\n            fieldKey: ITokenBalanceGridFieldKeys.PercentFraction,\n            type: \"number\",\n            isSortable: true,\n            defaultSortOrder: GridSortingOrder.Descending,\n            selected: true,\n            getFieldValue: f => totalTokenBalanceUsd ? f.chart[0].balanceUsd / totalTokenBalanceUsd : 0,\n            renderer: new FractionRenderer(locale, totalTokenBalanceUsd)\n        }, {\n            label: t.get(\"accountView.content.balanceGrid.header.chart\"),\n            fieldKey: ITokenBalanceGridFieldKeys.Chart,\n            type: \"array\",\n            isSortable: false,\n            selected: true,\n            getFieldValue: f => f.chart[0].balanceUsd,\n            renderer: new BalanceChartRenderer()\n        }];\n    }\n\n    public get defaultSortedField() {\n        return this.fields.find(f => f.fieldKey === ITokenBalanceGridFieldKeys.PercentFraction);\n    }\n}\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Grid } from \"app/shared/component/Grid\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { TokenBalanceGridFields } from \"./TokenBalanceGridFields\";\nimport { IAccountBalanceData } from \"app/eth-extended/data/account/balance/IAccountBalanceDataSet\";\nimport { IGridDataRow } from \"@alethio/ui/lib/control/grid/Grid\";\n\ninterface ITokenBalanceGridProps {\n    tokenBalances: IAccountBalanceData[];\n    translation: ITranslation;\n    locale: string;\n}\n\nexport class TokenBalanceGrid extends React.PureComponent<ITokenBalanceGridProps> {\n    private gridFields: GridFields<IAccountBalanceData>;\n    private gridSortingOptions: GridSortingOptions;\n\n    constructor(props: ITokenBalanceGridProps) {\n        super(props);\n        let totalTokenBalanceUsd = props.tokenBalances.reduce((acc, item) => {\n            return acc + item.chart[0].balanceUsd;\n        }, 0);\n        this.gridFields = new TokenBalanceGridFields(props.translation, props.locale, totalTokenBalanceUsd);\n        this.gridSortingOptions = new GridSortingOptions(this.gridFields.defaultSortedField);\n    }\n\n    componentDidUpdate(prevProps: ITokenBalanceGridProps) {\n        if (this.props.locale !== prevProps.locale) {\n            let totalTokenBalanceUsd = this.props.tokenBalances.reduce((acc, item) => {\n                return acc + item.chart[0].balanceUsd;\n            }, 0);\n            let { translation, locale } = this.props;\n            this.gridFields = new TokenBalanceGridFields(translation, locale, totalTokenBalanceUsd);\n        }\n    }\n\n    render() {\n        const rows = this.props.tokenBalances.map<IGridDataRow<IAccountBalanceData>>(tk => {\n            return {\n                key: tk.currency.address,\n                data: tk\n            };\n        });\n        return (\n            <Grid<IAccountBalanceData>\n                rows={rows}\n                fields={this.gridFields}\n                sortingOptions={this.gridSortingOptions}\n                translation={this.props.translation}\n            />\n        );\n    }\n\n}\n","import * as React from \"react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { AccountBalance } from \"app/eth-extended/data/account/balance/AccountBalance\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITotalBalance } from \"app/eth-extended/data/account/balance/ITotalBalance\";\nimport { EthBalanceDetails } from \"./EthBalanceDetails\";\nimport { AllTokensBalanceDetails } from \"./AllTokensBalanceDetails\";\nimport { LoadStatus } from \"plugin-api/LoadStatus\";\nimport { SpinnerRegular } from \"@alethio/ui/lib/fx/SpinnerRegular\";\nimport { ErrorIconHint } from \"app/shared/component/ErrorIconHint\";\nimport { observer } from \"mobx-react\";\nimport { observable, action } from \"mobx\";\nimport { Fade } from \"@alethio/ui/lib/fx/Fade\";\nimport { TokenBalanceGrid } from \"app/eth-extended/module/account/balance/component/TokenBalanceGrid\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { ResponsiveContainer } from \"@alethio/ui/lib/layout/responsive/ResponsiveContainer\";\nimport { IAsyncData } from \"plugin-api/IAsyncData\";\n\nconst BalanceSectionRoot = styled<{accountHasTokens: boolean}, \"div\">(\"div\")`\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanStandardView} {\n        display: ${(props) => props.accountHasTokens ? \"block\" : \"none\"};\n    }\n`;\nconst BalanceSectionGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(5, auto);\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanStandardView} {\n        grid-template-columns: repeat(3, auto);\n    }\n`;\n\nconst BalanceGridRoot = styled.div`\n    max-width: 100vw;\n    overflow-y: auto;\n`;\n\n// HACK: duplicated component, but we'll remove when we refactor the page to use a standard sidebar\nconst ContentLeftPadded = styled.div`\n    box-sizing: border-box;\n    padding-left: ${props => props.theme.spacing.sidebarWidth}px;\n\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanStandardView} {\n        padding-left: 0px;\n    }\n`;\n\nexport interface IBalanceSectionProps {\n    historicalBalance: IAsyncData<AccountBalance>;\n    totalBalance: ITotalBalance | undefined;\n    translation: ITranslation;\n    locale: string;\n}\n\n@observer\nexport class BalanceSection extends React.Component<IBalanceSectionProps> {\n    @observable\n    private tokenBalanceExpanded: boolean;\n\n    render() {\n        let { translation: tr, locale, historicalBalance, totalBalance } = this.props;\n\n        return (\n            <BalanceSectionRoot accountHasTokens={historicalBalance.isLoaded() && historicalBalance.data.hasTokens()}>\n                <ContentLeftPadded>\n                    {/* The value 540 is the same value as the hide of the row first label when\n                    `ignoreFirstLabel` is used. TODO: Replace this with the future implementation of Layout\n                    that will move labels and info on separate lines when viewport is too small */}\n                    <ResponsiveContainer behavior=\"show\" forScreenWidth={{lowerThan: 540}}>\n                        <LayoutRow>\n                            <LayoutRowItem>\n                                <Label>{tr.get(\"accountView.content.balance.label\")}</Label>\n                            </LayoutRowItem>\n                        </LayoutRow>\n                    </ResponsiveContainer>\n                    <LayoutRow responsive={{ignoreFirstLabel: \"forLowRes\"}}>\n                        <LayoutRowItem autoHeight>\n                            <Label>{tr.get(\"accountView.content.balance.label\")}</Label>\n                            { historicalBalance.isLoaded() && totalBalance ?\n                            <BalanceGridRoot>\n                                <BalanceSectionGrid>\n                                    <EthBalanceDetails\n                                        ethBalance={historicalBalance.data.getEthBalance()}\n                                        totalBalance={totalBalance}\n                                        locale={locale}\n                                    />\n                                    { historicalBalance.data.hasTokens() ?\n                                        <AllTokensBalanceDetails\n                                            tokenAggregatedBalance={historicalBalance.data.aggregateTokenBalance()}\n                                            totalTokenTypes={historicalBalance.data.getTokenTypeCount()}\n                                            totalBalance={totalBalance}\n                                            expanded={this.tokenBalanceExpanded}\n                                            onToggleExpand={this.toggleTokenBalanceContent}\n                                            locale={locale}\n                                            translation={tr}\n                                        />\n                                    : null }\n                                </BalanceSectionGrid>\n                            </BalanceGridRoot>\n                            : (\n                                historicalBalance.loadStatus === LoadStatus.Loading ?\n                                <SpinnerRegular /> : <ErrorIconHint translation={tr} />\n                            ) }\n                        </LayoutRowItem>\n                    </LayoutRow>\n                </ContentLeftPadded>\n                { this.tokenBalanceExpanded && historicalBalance.isLoaded() && totalBalance ?\n                <Fade duration={.2} delay={.2}>\n                    <BalanceGridRoot>\n                        <TokenBalanceGrid\n                            tokenBalances={historicalBalance.data.getAllTokenBalances()}\n                            translation={tr}\n                            locale={locale}\n                        />\n                    </BalanceGridRoot>\n                </Fade>\n                : null }\n            </BalanceSectionRoot>\n        );\n    }\n\n    @action\n    private toggleTokenBalanceContent = () => {\n        this.tokenBalanceExpanded = !this.tokenBalanceExpanded;\n    }\n}\n","import * as React from \"react\";\nimport { ChartSection } from \"./ChartSection\";\nimport { ContentBottomSection } from \"./ContentBottomSection\";\nimport { ResponsiveContainer, MinimumWidth } from \"@alethio/ui/lib/layout/responsive/ResponsiveContainer\";\nimport { AccountBalance } from \"app/eth-extended/data/account/balance/AccountBalance\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Spacer } from \"@alethio/ui/lib/layout/Spacer\";\nimport { BalanceSection } from \"./BalanceSection\";\nimport { ITotalBalance } from \"app/eth-extended/data/account/balance/ITotalBalance\";\nimport { IAsyncData } from \"plugin-api/IAsyncData\";\n\nexport interface IBalanceProps {\n    isFreshAccount: boolean;\n    historicalBalance: IAsyncData<AccountBalance>;\n    totalBalance: ITotalBalance | undefined;\n    translation: ITranslation;\n    locale: string;\n}\n\nexport class Balance extends React.Component<IBalanceProps> {\n    render() {\n        let { historicalBalance, isFreshAccount, totalBalance, translation: tr, locale } = this.props;\n\n        return <>\n            <ChartSection\n                accountBalance={historicalBalance}\n                isFreshAccount={isFreshAccount}\n                translation={tr}\n                locale={locale}\n            />\n            <ContentBottomSection>\n                <ResponsiveContainer behavior=\"hide\" forScreenWidth={{lowerThan: MinimumWidth.ForStandardView}}>\n                    <Spacer height=\"58px\" />\n                </ResponsiveContainer>\n                { !isFreshAccount ?\n                <BalanceSection\n                    historicalBalance={historicalBalance}\n                    totalBalance={totalBalance}\n                    translation={tr}\n                    locale={locale}\n                /> : null }\n            </ContentBottomSection>\n        </>;\n    }\n}\n"],"sourceRoot":""}