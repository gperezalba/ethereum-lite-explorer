{"version":3,"sources":["webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/BlockTxsState.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/txHighlight/HighlightFieldKey.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/txHighlight/HighlightFieldsFull.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/BlockTxsStateFactory.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxTooltipContent.tsx","webpack://__aleth_io__ethLite/./app/shared/component/Grid.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxGridFields.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxsGrid.tsx","webpack://__aleth_io__ethLite/./app/helper/logScale.ts","webpack://__aleth_io__ethLite/./app/helper/minMaxLogScale.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/BlockTxs.tsx"],"names":["BlockTxsState","[object Object]","txsViewMode","txsHighlightFields","txsGridSortingOptions","this","HighlightFieldKey","HighlightFieldsFull_HighlightFieldsFull","HighlightFields","super","fields","key","Value","getLabel","t","get","getData","tx","value","GasPrice","gasPrice","GasLimit","gasLimit","setSelectedField","BlockTxsStateFactory_BlockTxsStateFactory","TxsViewMode","GridSortingOptions","TxTooltipContent_TxTooltipContent","external_react_","translation","props","TxTooltipContentWrapper","TxHashBox","variant","hash","Label","AddressHashBox","from","to","style","paddingLeft","arrow","disabled","isZero","display","EthValueBox","wei","locale","Grid_Grid","_a","tr","tslib_es6","grid_Grid","Object","assign","noDataText","loadMoreText","TxGridFields_TxGridFields","GridFields","label","fieldKey","ITxGridFieldKeys","Hash","type","isSortable","selected","alwaysVisible","getFieldValue","f","renderer","TxLinkRenderer","From","AccountLinkRenderer","To","EthRenderer","TxsGridRoot","styled_components","div","withConfig","displayName","componentId","TxsGrid_TxsGrid","TxsGrid","gridFields","gridSortingOptions","prevProps","rows","transactions","map","data","sortingOptions","external_mobx_","ref","external_mobx_react_","logScale","x","maxValue","percent","dividedBy","multipliedBy","toNumber","Math","floor","log10","minMaxLogScale","values","defaultSize","length","min","BigNumber","minimum","max","maxSize","maximum","minus","v","HIGHLIGHT_THRESHOLD","BlockTxs_BlockTxs","BlockTxs","external_react_default","a","Component","renderHeatMapTooltip","createElement","blockTxsState","uiStateContainer","blockTxsLiteState","create","txs","Fragment","LayoutRow","minWidth","LayoutRowItem","TxCountBox","TxHighlightSelector","isTableList","ViewSelectorBox","isHeatMapGrid","fullRow","autoHeight","maxWidth","TxsHeatMap","highlightThreshold","highlightDataSelector","getSelectedField","scaleValuesFn","txTooltipThunk","Spacer","height"],"mappings":"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","file":"85c427f42cb04375af5f.bundle.js","sourcesContent":["import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./txHighlight/HighlightFieldKey\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nexport class BlockTxsState {\n    constructor(\n        public txsViewMode: TxsViewMode,\n        public txsHighlightFields: HighlightFields<ITxDetails, HighlightFieldKey>,\n        public txsGridSortingOptions: GridSortingOptions\n    ) {\n\n    }\n}\n","export enum HighlightFieldKey {\n    Value = \"value\",\n    GasPrice = \"gasprice\",\n    GasLimit = \"gaslimit\"\n}\n","import { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./HighlightFieldKey\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nexport class HighlightFieldsFull extends HighlightFields<ITxDetails, HighlightFieldKey> {\n    constructor() {\n        super();\n        this.fields = [{\n            key: HighlightFieldKey.Value,\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.value.label\"),\n            getData: tx => tx.value\n        }, {\n            key: HighlightFieldKey.GasPrice,\n            getLabel: t => t.get(\"general.gasPrice\"),\n            getData: tx => tx.gasPrice\n        }, {\n            key: HighlightFieldKey.GasLimit,\n            getLabel: t => t.get(\"general.gasLimit\"),\n            getData: tx => tx.gasLimit\n        }];\n        this.setSelectedField(HighlightFieldKey.Value);\n    }\n}\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { BlockTxsState } from \"./BlockTxsState\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFieldsFull } from \"./txHighlight/HighlightFieldsFull\";\n\nexport class BlockTxsStateFactory {\n    create() {\n        return new BlockTxsState(\n            new TxsViewMode(),\n            new HighlightFieldsFull(),\n            new GridSortingOptions()\n        );\n    }\n}\n","import * as React from \"react\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\nimport { TxHashBox } from \"@alethio/explorer-ui/lib/box/tx/TxHashBox\";\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\nimport { TxTooltipContentWrapper } from \"@alethio/explorer-ui/lib/blockTxs/TxTooltipContentWrapper\";\n\nexport interface ITxTooltipContentProps {\n    tx: ITxDetails;\n    translation: ITranslation;\n    locale: string;\n}\n\nexport class TxTooltipContent extends React.Component<ITxTooltipContentProps> {\n    render() {\n        let { tx, translation } = this.props;\n        return (\n            <TxTooltipContentWrapper>\n                <TxHashBox variant=\"small\">{tx.hash}</TxHashBox>\n                <Label>{translation.get(\"general.from\")}</Label>\n                <AddressHashBox variant=\"small\">{tx.from}</AddressHashBox>\n                <Label>{translation.get(\"general.to\")}</Label>\n                <AddressHashBox variant=\"small\">{tx.to}</AddressHashBox>\n                <div style={{paddingLeft: 8}}>\n                    <Label arrow disabled={tx.value.isZero()}>{translation.get(\"txTooltip.value.label\")}</Label>\n                </div>\n                <div style={{display: \"flex\"}}>\n                    <EthValueBox variant=\"smallThin\" wei={tx.value} locale={this.props.locale} />\n                </div>\n            </TxTooltipContentWrapper>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Grid as GridBase, IGridProps as IGridBaseProps } from \"@alethio/ui/lib/control/grid/Grid\";\n\nexport interface IGridProps<TData> {\n    rows: IGridBaseProps<TData>[\"rows\"];\n    limitRows?: boolean;\n    maxVisibleRows?: number;\n    fields: IGridBaseProps<TData>[\"fields\"];\n    sortingOptions: IGridBaseProps<TData>[\"sortingOptions\"];\n    translation: ITranslation;\n}\n\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\n    render() {\n        let { translation: tr, ...props} = this.props;\n\n        return <GridBase<TData>\n            {...props}\n            noDataText={tr.get(\"general.grid.footer.norowsavailable.label\")}\n            loadMoreText={tr.get(\"general.grid.footer.loadMore.label\")}\n        />;\n    }\n}\n","import { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\nimport { AccountLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountLinkRenderer\";\nimport { ITxGridFieldKeys } from \"./TxsGrid\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nexport class TxGridFields extends GridFields<ITxDetails> {\n    constructor(t: ITranslation, locale: string) {\n        super();\n        this.fields = [{\n            label: t.get(\"general.hash\"),\n            fieldKey: ITxGridFieldKeys.Hash,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            alwaysVisible: true,\n            getFieldValue: f => f.hash,\n            renderer: new TxLinkRenderer(f => f.hash)\n        }, {\n            label: t.get(\"general.from\"),\n            fieldKey: ITxGridFieldKeys.From,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.from,\n            renderer: new AccountLinkRenderer(f => f.from)\n        }, {\n            label: t.get(\"general.to\"),\n            fieldKey: ITxGridFieldKeys.To,\n            type: \"string\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.to,\n            renderer: new AccountLinkRenderer(f => f.to)\n        }, {\n            label: t.get(\"general.valueEth\"),\n            fieldKey: ITxGridFieldKeys.Value,\n            type: \"number\",\n            isSortable: true,\n            selected: true,\n            getFieldValue: f => f.value,\n            renderer: new EthRenderer(\n                locale,\n                f => f.value\n            )\n        }];\n    }\n}\n","import * as React from \"react\";\nimport { observable, action } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\nimport { Grid } from \"app/shared/component/Grid\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxGridFields } from \"./TxGridFields\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nconst TxsGridRoot = styled.div`\n    margin-top: 16px;\n`;\n\nexport enum ITxGridFieldKeys {\n    Type = \"type\",\n    Hash = \"hash\",\n    From = \"from\",\n    To = \"to\",\n    Value = \"value\"\n}\n\ninterface ITxGridProps {\n    transactions: ITxDetails[];\n    locale: string;\n    translation: ITranslation;\n    gridSortingOptions: GridSortingOptions;\n}\n\n@observer\nexport class TxsGrid extends React.Component<ITxGridProps> {\n    @observable.ref\n    private gridFields: GridFields<ITxDetails>;\n    private gridSortingOptions: GridSortingOptions;\n\n    constructor(props: ITxGridProps) {\n        super(props);\n        this.gridFields = new TxGridFields(props.translation, props.locale);\n        this.gridSortingOptions = this.props.gridSortingOptions;\n    }\n\n    @action\n    componentDidUpdate(prevProps: ITxGridProps) {\n        if (this.props.translation !== prevProps.translation) {\n            this.gridFields = new TxGridFields(this.props.translation, this.props.locale);\n        }\n    }\n\n    render() {\n        const rows = this.props.transactions.map(tx => {\n            return {\n                key: tx.hash,\n                data: tx\n            };\n        });\n        return (\n            <TxsGridRoot>\n                <Grid<ITxDetails>\n                    rows={rows}\n                    fields={this.gridFields}\n                    sortingOptions={this.gridSortingOptions}\n                    translation={this.props.translation}\n                />\n            </TxsGridRoot>\n        );\n    }\n}\n","import { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Produces scaled percentage values\n */\nexport function logScale(x: BigNumber, maxValue: BigNumber) {\n    // We can loose precision here\n    let percent = x.dividedBy(maxValue).multipliedBy(100).toNumber();\n    return Math.floor(Math.log10(100 * percent + 1) * 25);\n}\n","import { logScale } from \"./logScale\";\nimport { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Takes an array of values and scales the items between the array min and max values to a percentage, logarithmically\n * e.g. Transforms interval (min, max) to (0, 100)\n *\n * Logarithmic scale is especially useful for transaction values that differ by an order of magnitude\n *\n * @param values\n * @param defaultSize If all values are the same, fill the result with this default\n */\nexport function minMaxLogScale(values: (number | BigNumber)[], defaultSize = 50) {\n    if (!values.length) {\n        return [];\n    }\n\n    let min = BigNumber.minimum(...values);\n    let max = BigNumber.maximum(...values);\n\n    let maxSize = max.minus(min);\n\n    if (maxSize.isZero()) {\n        // All values are equal, just fill with default size\n        return values.map(v => defaultSize);\n    }\n\n    /*\n     * Array values between [min, max]:\n     * |---|----------------------|\n     * 0  min                    max\n     *     |----------------------|      ( x1 = x0 - min )\n     *     0                  max - min\n     *     |----------------------|      ( x2 = log(x1 * 100 / max) )\n     *     0                     100\n     */\n    return values\n        // translate(-min)\n        .map(v => new BigNumber(v).minus(min))\n        // scale to maxSize and apply log scale\n        .map(v => logScale(v, maxSize));\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { Spacer } from \"@alethio/ui/lib/layout/Spacer\";\nimport { TxCountBox } from \"@alethio/explorer-ui/lib/box/block/TxCountBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { TxHighlightSelector } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/TxHighlightSelector\";\nimport { ViewSelectorBox } from \"@alethio/explorer-ui/lib/blockTxs/ViewSelectorBox\";\nimport { BlockTxsStateFactory } from \"../BlockTxsStateFactory\";\nimport { BlockTxsState } from \"../BlockTxsState\";\nimport { TxTooltipContent } from \"./TxTooltipContent\";\nimport { TxsHeatMap } from \"@alethio/explorer-ui/lib/blockTxs/txHeatMap/TxsHeatMap\";\nimport { TxsGrid } from \"./TxsGrid\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\n\nconst HIGHLIGHT_THRESHOLD = 80;\n\ninterface IGlobalState {\n    blockTxsLiteState?: BlockTxsState;\n}\n\nexport interface IBlockTxsProps {\n    txs: ITxDetails[];\n    translation: ITranslation;\n    locale: string;\n    uiStateContainer: IGlobalState;\n}\n\n@observer\nexport class BlockTxs extends React.Component<IBlockTxsProps> {\n    constructor(props: IBlockTxsProps) {\n        super(props);\n\n        // TODO: encapsulation per module type\n        let blockTxsState = this.props.uiStateContainer.blockTxsLiteState;\n        if (!blockTxsState) {\n            blockTxsState = new BlockTxsStateFactory().create();\n            this.props.uiStateContainer.blockTxsLiteState = blockTxsState;\n        }\n    }\n\n    render() {\n        let { translation: tr, txs, locale, uiStateContainer } = this.props;\n        let {\n            txsGridSortingOptions, txsHighlightFields, txsViewMode\n        } = uiStateContainer.blockTxsLiteState as BlockTxsState;\n\n        return <>\n            <LayoutRow minWidth={610}>\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\n                    <TxCountBox>{txs.length}</TxCountBox>\n                </LayoutRowItem>\n                { txs.length ?\n                <LayoutRowItem>\n                    <Label>{tr.get(\"blockView.content.transactionsHighlight.label\")}</Label>\n                    <TxHighlightSelector fields={txsHighlightFields} translation={tr}\n                        disabled={txsViewMode.isTableList} />\n                    <ViewSelectorBox txsViewMode={txsViewMode} />\n                </LayoutRowItem>\n                : null }\n            </LayoutRow>\n            { txs.length ?\n            <>\n                { txsViewMode.isHeatMapGrid ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <div />\n                        <div style={{ maxWidth: 600 }}>\n                            <TxsHeatMap\n                                transactions={txs}\n                                highlightThreshold={HIGHLIGHT_THRESHOLD}\n                                highlightDataSelector={txsHighlightFields.getSelectedField().getData}\n                                scaleValuesFn={minMaxLogScale}\n                                txTooltipThunk={this.renderHeatMapTooltip}\n                            />\n                        </div>\n                    </LayoutRowItem>\n                </LayoutRow>\n                :\n                <TxsGrid\n                    transactions={txs}\n                    gridSortingOptions={txsGridSortingOptions}\n                    locale={locale}\n                    translation={tr}\n                />\n                }\n                <Spacer height=\"64px\" />\n            </>\n            : null }\n        </>;\n    }\n\n    private renderHeatMapTooltip = (tx: ITxDetails) => {\n        return <TxTooltipContent\n            tx={tx}\n            translation={this.props.translation} locale={this.props.locale}\n        />;\n    }\n}\n"],"sourceRoot":""}